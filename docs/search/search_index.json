{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started with ZubZet","text":""},{"location":"#why-should-you-use-a-framework-for-php-development","title":"Why should you use a framework for PHP development?","text":"<p>It is not 100% necessary to use a framework, but especially raw PHP code is usually very messy. This is mostly because the language allows for so many formatting and usage habits, that might not reflect best practices. This adds up. Using a good framework vastly improves your style, but that is not it yet. The biggest advantage is, that ZubZet adds multiple layers of abstraction on top of PHP. This allows you to create webapps in record time. Even an empty project is already capable of a login system, a dashboard, a sitemap, PDF generation, HTML templating and more.</p>"},{"location":"#using-mvc","title":"Using MVC","text":"<p>Using this framework effectively, you must understand the MVC pattern, which consists of:</p> <ol> <li> <p>Controllers handle all the logic within your program. They do the actual computational work.</p> </li> <li> <p>Models handle all interactions with your data structure. This could be referring to a database as well as file or else.</p> </li> <li> <p>Views are basically templates of your content, which get propagated with the results of your controllers.</p> </li> </ol>"},{"location":"#api-reference","title":"API reference","text":"<p>This documentation provides a general overview about most features and best practice related topics, but if you need something more technical that explains every file, class, method and their parameters, please refer to the API Reference.</p>"},{"location":"advanced-features/aliases-and-virtual-links/","title":"Using aliases within virtual links","text":""},{"location":"advanced-features/aliases-and-virtual-links/#explanation","title":"Explanation","text":"<p>If would like to have short or  other versions of your virtual links, you can use aliases. To create a new alias, use the reroute method.  More about the reroute method can be found in the API reference. Set the second parameter to true. This turns the reroute into an alias reroute. The current path will then be replaced with the first argument, but will not be truncated.</p>"},{"location":"advanced-features/aliases-and-virtual-links/#example","title":"Example","text":"<p>Only the first part of the URL get rerouted. The rest stays untouched.</p>"},{"location":"advanced-features/aliases-and-virtual-links/#code","title":"Code","text":"<p><code>$res-&gt;reroute([\"ws\"], true);</code></p>"},{"location":"advanced-features/aliases-and-virtual-links/#result","title":"Result","text":"<pre><code>Before:\n/workspace/upload/endpoint/\n\nAfter:\n/ws/upload/endpoint/\n</code></pre>"},{"location":"advanced-features/commands/","title":"Commands","text":""},{"location":"advanced-features/commands/#creating-a-command","title":"Creating a command","text":"<p>The current implementation simply uses the already existing controller structure. Nothing extra needed to do.</p>"},{"location":"advanced-features/commands/#running-a-command","title":"Running a command","text":"<p>To run a command, simply use: <code>php index.php run &lt;controller&gt; &lt;action&gt; &lt;param1&gt; ...</code> </p> <p>Be sure to use <code>chdir(realpath(__DIR__))</code> in your index.php if you are running commands from a different working directory, e.g. as a cronjob.</p>"},{"location":"advanced-features/sitemap-generation/","title":"Using the Sitemap","text":""},{"location":"advanced-features/sitemap-generation/#a-description-of-the-feature","title":"A description of the feature","text":"<p>Websites usually have some kind of sitemap. Basically, they are just a list of availible links on a website or webapp and make it easier for search engines to index all of the links, even those that are not linked to. </p>"},{"location":"advanced-features/sitemap-generation/#how-to-auto-generate-them","title":"How to auto generate them","text":"<p>The framework is able to auto generate the sitemap. To open it, simply use <code>{root}/sitemap</code>. The default setting for any action is to not be displayed in the sitemap. You can either change the default setting by changing the key sitemapPublicDefault in the z_settings.ini file or by adding an attribute for each attribute foreach action you want displayed in the sitemap.</p> <p>An attribute to enable the sitemap for an actions needs to look like the following:</p> Access Modifyer Storage Class $ and the action name The Setting Value public static $action_test _sitemap = true; <pre><code>Result:\npublic static $action_test_sitemap = true;\n</code></pre> <p>If you are using <code>action_fallback</code>, you can also pass a string array instead of a simple true. Every entry in this array will than be interpreted as a unique link.</p>"},{"location":"core-features/configuration/","title":"The Booter Settings","text":""},{"location":"core-features/configuration/#what-is-this","title":"What is this?","text":"<p>The booter settings are a way of getting your most basic settings. If you have something like the uploads folder or the database connection, that might be changed by a customer/admin after finishing this project, those values can be stored under your <code>z_config folder</code> as a key of <code>z_settings.ini</code>.</p>"},{"location":"core-features/configuration/#how-to-use-it","title":"How to use it","text":"<p>If you want to use another key, simply create a new key in your <code>z_settings.ini</code>. To recall the value use <code>$res-&gt;getBooterSettings(\"key\")</code>. If you don't pass a key, the whole array of values will be returned.</p>"},{"location":"core-features/configuration/#what-do-you-actually-put-in-here","title":"What do you actually put in here?","text":"<ul> <li>Database connection details</li> <li>Connections to other external tools like a Mailer, Storage or Api keys.</li> <li>Basic Framework settings</li> </ul>"},{"location":"core-features/configuration/#example","title":"Example","text":"<pre><code>public function action_chatgpt(Request $req, Response $res) {\n    $chatgptApiKey = $res-&gt;getBooterSettings(\"chatgpt_api_key\");\n\n    /* remaining code */\n\n    return $res-&gt;render(\"admin/chatgpt.php\");\n}\n</code></pre>"},{"location":"core-features/configuration/#purpose","title":"Purpose","text":"<p>This helps manage credentials and settings more easily, while keeping sensitive data separate from everything else.</p>"},{"location":"core-features/controllers-and-actions/","title":"Getting Started: Controllers and Actions","text":""},{"location":"core-features/controllers-and-actions/#what-does-a-controller-do","title":"What does a controller do?","text":"<p>A controller is one part of the MVC pattern. It handles all the logic, but what does that mean? Usually the controller takes in data from one or multiple models as well as user input and does something with it. This could include sorting, searching, calculating and generally making the data ready to display or ready to put into the database in case of a form input for example. </p>"},{"location":"core-features/controllers-and-actions/#how-to-get-a-controller-executed","title":"How to get a controller executed?","text":"<p>Since there are no actual paths, controllers are tightly bound to the requested url. The first part of the URL, that is not part of getting to your project's root directory, determines which Controller will be used. If you call your controller IndexController, it will be executed when no name is given by a reuqest. </p>"},{"location":"core-features/controllers-and-actions/#routing","title":"Routing","text":"<p>The url is separated into 4 relevant parts</p> <ul> <li>Host/root for example <code>localhost/</code> or <code>www.example.com/</code></li> <li>Controller name</li> <li>Action name</li> <li>Parameters</li> </ul> <p><code>localhost/example/test/123/321</code></p> <p>This would call the <code>action_test</code> in the <code>exampleController.php</code>  with the parameters 123 and 321.</p>"},{"location":"core-features/controllers-and-actions/#default-actions","title":"Default Actions","text":"<p>To handle default behavior there are predefined actions.</p> Name Description action_index Will be executed if no action is specified in the request.  <code>localhost/example/</code> action_fallback Will be executed when the requested action is not found. Can be used to have infinite actions.  <code>localhost/example/ghdafiehihwe</code>"},{"location":"core-features/controllers-and-actions/#basic-controller","title":"Basic Controller","text":"<p>The following function <code>action_test</code> will be executed when requesting the path <code>{root}/example/test/{parameters}</code>.</p> <pre><code>&lt;?php\n    class ExampleController extends z_controller {\n\n        public function action_test(Request $req, Response $res) {\n\n        }\n\n    }\n?&gt;\n</code></pre>"},{"location":"core-features/controllers-and-actions/#advanced-controller-example","title":"Advanced Controller Example","text":"<pre><code>&lt;?php\n    class EmployeeController extends z_controller {\n\n\n        // This action will be executed when requesting the path `{root}/Employee`\n        public function action_index(Request $req, Response $res) {\n            return $res-&gt;render(\"employee/index.php\");\n        }\n\n        // This action will be executed when requesting the path `{root}/Employee/list`\n        public function action_list(Request $req, Response $res) {\n            // Check the permissions of the currently logged-in user.\n            $req-&gt;checkPermission(\"employee.list\");\n\n            // Handle an asynchronous POST-request with the parameter: action=delete-employee\n            if ($req-&gt;isAction(\"delete-employee\")) {\n                $req-&gt;checkPermission(\"employee.delete\");\n\n                $employeeId = $req-&gt;getPost(\"employeeId\");\n\n                // Interacting with Models\n                $req-&gt;getModel(\"Employee\")-&gt;deleteById($employeeId);\n\n                return $res-&gt;success();\n            }\n\n            // Rendering the View with all Employees as Array\n            return $res-&gt;render(\"employee/employee_list.php\", [\n                \"employees\" =&gt; $req-&gt;getModel(\"Employee\")-&gt;getAll()\n            ]);\n        }\n\n        // This action will be executed when requesting the path `{root}/Employee/view`\n        public function action_view(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"employee.view\");\n\n            // Retrives URL parameters (Offset, Length)\n            $employeeId = $req-&gt;getParameters(0, 1);\n\n            $employee = $req-&gt;getModel(\"Employee\")-&gt;getById($employeeId);\n\n            return $res-&gt;render(\"employee/employee_view.php\", [\n                \"employee\" =&gt; $employee\n            ]);\n        }\n    }\n?&gt;\n</code></pre>"},{"location":"core-features/layouts/","title":"Using a layout in your project","text":""},{"location":"core-features/layouts/#what-is-a-layout","title":"What is a layout?","text":"<p>When talking about a layout, a reusable page structure is meant. To an extend, most content pages look very similar. Think Navigation or Footer. A perfect opportunity for generalization.</p>"},{"location":"core-features/layouts/#how-to-use-one-in-your-project","title":"How to use one in your project?","text":"<p>When using <code>$res-&gt;render</code>, a third optional parameter accepts a path to a layout. If no parameter is given, the render engine will look for a layout with the standard name in your views folder. The standard location for a layout is: <code>{your z_views folder}/layout/default_layout.php</code>. If you wish to use a different location, you'll need to use the third parameter to specify a different path. This also allows you to use multiple layouts within the same project and even switch dynamically for content pages. </p>"},{"location":"core-features/layouts/#example-layout","title":"Example layout","text":"<pre><code>&lt;?php return [\"layout\" =&gt; function($opt, $body, $head) { ?&gt;\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;?php $head($opt); ?&gt;\n        &lt;link rel=\"stylesheet\" href=\"assets/css/bootstrap.min.css\"&gt;\n    &lt;/head&gt;\n    &lt;body class=\"d-flex flex-column min-vh-100\"&gt;\n        &lt;header&gt;\n            &lt;nav class=\"navbar navbar-expand-lg navbar-light bg-light\"&gt;\n                &lt;a class=\"navbar-brand\"&gt;Adminpage&lt;/a&gt;\n            &lt;/nav&gt;\n        &lt;/header&gt;\n\n        &lt;main class=\"container mt-5\"&gt;\n            &lt;?php $body($opt); ?&gt;\n        &lt;/main&gt;\n\n        &lt;footer class=\"my-2 footer fixed-bottom\"&gt;\n            &lt;p class=\"text-center text-body-secondary\"&gt;\u00a9 2024 Company&lt;/p&gt;\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n&lt;?php }, \"lang\" =&gt; [\n    \"en\" =&gt; [\n        \"key\" =&gt; \"word\",\n        \"key2\" =&gt; \"word2\"\n    ],\n    \"DE_Formal\" =&gt; [\n        \"key\" =&gt; \"wort\",\n        \"key2\" =&gt; \"wort2\"\n    ]\n]]; ?&gt;\n</code></pre>"},{"location":"core-features/layouts/#example-usage","title":"Example usage","text":"<pre><code>public function action_index(Request $req, Response $res) {\n    return $res-&gt;render(\"admin/index.php\", [], \"admin/layout.php\");\n}\n</code></pre>"},{"location":"core-features/localization/","title":"Translations for multiple languages","text":"<p>The framework has functions to create the same pages in multiple languages from one view. Nothing outside the view needs to be changed to use this feature. The system is simple and can only match sentences to keys. Its not possible to do advanced stuff like getting plural forms automatically.</p>"},{"location":"core-features/localization/#defining-keys","title":"Defining keys","text":"<p>To define language keys, add a <code>lang</code> index to your view return array. In <code>lang</code> you can add multiple languages and keys to them. <pre><code>return [\n    \"head\" =&gt; function($opt) { ... },\n    \"body\" =&gt; function($opt) { ... },\n    \"lang\" =&gt; [\n        \"de\" =&gt; [\n            \"roles\" =&gt; \"Rollen\",\n            \"name\" =&gt; \"Name\",\n            \"permissions\" =&gt; \"Berechtigungen\",\n            \"permission\" =&gt; \"Berechtigung\",\n            \"delete_confirm\" =&gt; \"M\u00f6chten Sie wirklich die Rolle l\u00f6schen?\",\n            \"delete\" =&gt; \"Rolle L\u00f6schen\"\n        ],\n        \"en\" =&gt; [\n            \"roles\" =&gt; \"Roles\",\n            \"name\" =&gt; \"Name\",\n            \"permissions\" =&gt; \"Permissions\",\n            \"permission\" =&gt; \"Permission\",\n            \"delete_confirm\" =&gt; \"Do you really want to delete this role?\",\n            \"delete\" =&gt; \"Delete role\"\n        ]\n    ]\n];\n</code></pre> Keys can also be defined inside the layout. Then they will be available in all views using that layout. To do that simply, add this lang index in the return array of the layout.</p>"},{"location":"core-features/localization/#using-keys","title":"Using keys","text":"<p>In the view you can access the keys with the <code>lang</code> method in <code>opt</code>. <pre><code>&lt;span&gt;&lt;?php $opt[\"lang\"](\"roles\") ?&gt;: 5&lt;/span&gt;\n</code></pre> <code>$opt[\"lang\"]($key, $doEcho)</code> will echo the value by default. If the second parameter is set to false, the value will be returned instead of echoed.</p>"},{"location":"core-features/models/","title":"Getting Started: Models","text":""},{"location":"core-features/models/#what-does-a-model-do","title":"What does a model do?","text":"<p>A model depicts all interactions with your data structure. This is usually either the database or a file. The model can be used to retrieve data as well as set it.</p>"},{"location":"core-features/models/#how-to-use-it","title":"How to use it","text":"<p>If you have already created a model, you can simply use <code>$req-&gt;getModel(\"Modelname\")</code> in a controller action to call the model. Otherwise, if you are within a model and need to call another model, you can use <code>$this-&gt;getModel(\"Modelname\")</code>.</p>"},{"location":"core-features/models/#built-in-functionality","title":"Built-In Functionality","text":"<p>Every model inherits many useful methods from the z_model class. You can simply use the already existing methods and build on them.</p>"},{"location":"core-features/models/#example-model","title":"Example Model","text":"<pre><code>&lt;?php\n\n    class EmployeeModel extends z_model {\n\n        public function getAll(): array {\n            $sql = \"SELECT *\n                    FROM `employee`\";\n            return $this-&gt;exec($sql)-&gt;resultToArray();\n        }\n\n        public function getById($employeeId): array {\n            $sql = \"SELECT *\n                    FROM `employee`\n                    WHERE `id` = ?\";\n            return $this-&gt;exec($sql, \"i\", $employeeId)-&gt;resultToLine();\n        }\n\n    }\n?&gt;\n</code></pre> <p>The method <code>exec</code> is probably the most important one for your model. It incorporates all the steps for a prepared statement in one simple line. The first parameter is the sql command as a variable or string literal. The second parameter is a string literal of all the variable types. Each char represents one variable. All parameters afterwards are expected to be variables and replace the question marks within the sql command.</p>"},{"location":"core-features/models/#prepared-types","title":"Prepared types","text":"Type Description Use Cases i An integer Mostly IDs, but also other numeric values s A string Names, Dates, Emails d A double A rational number b A blob Binary data like an image. (Not recommended)"},{"location":"core-features/models/#example-database-request","title":"Example Database Request","text":"<pre><code>$sql = \"SELECT * \n        FROM `employee` \n        WHERE `first_name` = ?\n        AND `age` = ?\";\n$this-&gt;exec($sql, \"si\", \"Klaus\", 30);\n</code></pre>"},{"location":"core-features/models/#execute-features","title":"Execute Features","text":"Type Description resultToLine() Converts the first row of the query result into a flat array (one-dimensional), often useful when fetching a single row of data. resultToArray() Converts the result set of a query into an array where each row is represented as an associative array. getInsertId() Get the last insert id. countResults Returns the number of results in the last query."},{"location":"core-features/models/#tips","title":"Tips","text":"Why not simply write queries without question marks? <p>When not preparing your variables, it is very likely that your code is vulnerable to SQl injections, one of the most common security mistakes made when dealing with databases.</p> <p>If you always use exec with the question marks in your queries, you save yourself from a lot of headaches.</p> <p>Learn more about SQL injections from the official PHP documentation. An interesting and even partly entertaining read.</p>"},{"location":"core-features/mvc/","title":"Models, Views and Controllers (Structure)","text":"<p>A model-view-controller (MVC) is an architectural design pattern that organizes an application's logic into distinct layers, each of which carries out a specific set of tasks.</p>"},{"location":"core-features/mvc/#whats-a-model","title":"What's a model?","text":"<p>The model depicts all interactions with your data structure. This is usually the database or a different data medium. The model can be used to retrieve, update and remove data.</p>"},{"location":"core-features/mvc/#whats-a-controller","title":"What's a controller?","text":"<p>It handles all the sites logic. Routing is Based on the name of the controller and its actions. This Interacts with models and renders views.</p>"},{"location":"core-features/mvc/#whats-a-view","title":"What's a view?","text":"<p>A view contains the html the user should see. All additional resources like css, images or javascript are also loaded from views. Views do usually not contain a footer, navigation, header or other elements that belong to the overall layout of the page. For this, layouts should be used as without a layout, a view can't be renderer. Read more about layouts here.</p>"},{"location":"core-features/parameter-abstraction/","title":"Parameters, post, get, file and cookies","text":""},{"location":"core-features/parameter-abstraction/#url-parameters","title":"URL Parameters","text":"<p>When using virtual links, parameters as \u201csubfolders\u201d is a great way of transfering values, that are also very readable. See the following link schema as an example of what is meant by parametres within the virtual link: <code>controller/action/param0/param1/param2/...</code></p>"},{"location":"core-features/parameter-abstraction/#read-the-parameters-using-code","title":"Read the parameters using code","text":"<p>To read the virtual url parameters use <code>$req-&gt;getParameters</code>. It works using an offset and a length, but can also use a value to compare against if the length is one.</p>"},{"location":"core-features/parameter-abstraction/#examples","title":"Examples","text":"<p>Example URL: <code>www.yourwebsite.com/{controller}/{action}/a/b/c</code></p> <p>Get the first parameter: <code>$req-&gt;getParameters(0, 1);</code> Returns: \"a\"</p> <p>Get all the parameters after the second one: <code>$req-&gt;getParameters(1);</code> Returns: [\"b\", \"c\"]</p> <p>Check if the first parameter is \"test\": <code>if($req-&gt;getParameters(0, 1, \"test\")) {</code> ... Returns: false</p> <p>Get the first parameter when using a fallback action <code>$req-&gt;getParameters(-1, 1);</code> Returns \"action\"</p>"},{"location":"core-features/parameter-abstraction/#code-example","title":"Code Example","text":"<pre><code>// Example execution `{root}/{controller}/employee/view/2`\npublic function action_employee(Request $req, Response $res) {\n\n    // Checks if the first URL parameter (offset 0, length 1) is \"view\"\n    if ($req-&gt;getParameters(0, 1, \"view\")) {\n\n        // Retrieves the second URL parameter (offset 1, length 1), which is the employeeId\n        $employeeId = $req-&gt;getParameters(1, 1);\n\n        return $res-&gt;render(\"employee/employee_view.php\", [\n            \"employee\" =&gt; $req-&gt;getModel(\"Employee\")-&gt;getEmployeeById($employeeId)\n        ]);\n    }\n\n    return $res-&gt;render(\"employee/list.php\");\n}\n</code></pre>"},{"location":"core-features/parameter-abstraction/#get-post-cookies-file-as-a-method","title":"GET, POST, COOKIES, FILE as a method","text":"<p>The framework includes some extra functionality when it comes to the above mentioned features and you should use the framework instead of the traditional way. This is because the framework employes extra filtering and processing methods as well as error handling already for you.</p>"},{"location":"core-features/parameter-abstraction/#getting-post-and-get-parameters","title":"Getting POST and GET parameters","text":"<p><code>$req-&gt;getGet</code> and <code>$req-&gt;getPost</code> are methods to get form parameters. These also enable to set default parameters if some are not set. Note: Post parameters get decoded automatically if their values have a special prefix like <code>&lt;#decb64#&gt;</code> or <code>&lt;#decURI#&gt;</code>. This decoding allows to transmit special characters.</p>"},{"location":"core-features/parameter-abstraction/#cookies","title":"Cookies","text":"<p><code>$req-&gt;getCookie</code> gets a cookie. It has a second parameter to set a default if the cookie is not set.</p> <p><code>$res-&gt;setCookie</code> has the same parameters as the native <code>setcookie</code> function of php. It should be used, because in the future may more logic build into the framework that deals with cookies.</p> <p><code>$res-&gt;unsetCookie</code> is an advanced method to remove cookies from the client.</p>"},{"location":"core-features/parameter-abstraction/#file","title":"File","text":"<p><code>$req-&gt;getFile</code> uses <code>$_FILE</code> like <code>$req-&gt;getPost</code> uses <code>$_POST</code>.</p>"},{"location":"core-features/permission-system/","title":"Using the permission system","text":""},{"location":"core-features/permission-system/#basic-explanation","title":"Basic explanation","text":"<p>A user can have multiple roles, and each role can have multiple permissions. These can be managed in the admin panel.</p>"},{"location":"core-features/permission-system/#roles","title":"Roles","text":"<p>Roles are the things that holds permissions. A role can be created with the Z-Admin panel (<code>{root}/z</code>). For a user to have access to the permissions of the role it needs to have the role assigned. The assignment can also be done with the Z-Admin panel.</p>"},{"location":"core-features/permission-system/#structure-of-a-permission","title":"Structure of a permission","text":"<p>Permissions are structured as multiple keywords connected by periods. For example: <code>admin.user.create</code>. This is descriptive as it can be seen that this permission is for admins with access to the user management and creating users. This style of writing permissions allows also the usage of wildcards. To <code>admin.user.create</code> someone with these permissions will have access to it: <code>*.*</code>, <code>admin.*</code>, <code>amdin.user.*</code> and <code>admin.user.create</code>. <code>*.*</code> is a wildcard for all permissions. Use it on you own risk.</p>"},{"location":"core-features/permission-system/#blocking-forbidden-pages","title":"Blocking forbidden pages","text":"<p>The Request object has a method called <code>checkPermission</code>. By calling it, all users without the permission given as the parameter will be rerouted to the 403 page and the current request will be cancled. So it is wise to call this at the very beginning of an action.</p>"},{"location":"core-features/permission-system/#controller-example","title":"Controller example:","text":"<p><pre><code>// Kicks the current request out of the action when it does not have \"employee.view\"\npublic function action_view(Request $req, Response $res) {\n    $req-&gt;checkPermission(\"employee.view\");\n\n    return $res-&gt;render(\"employee/employee_view.php\");\n}\n</code></pre> <pre><code>// Returns a bool if the user has the permission\npublic function action_view(Request $req, Response $res) {\n    if(!$req-&gt;checkPermission(\"employee.view\", true)) { \n        return $res-&gt;render(\"forbidden.php\");\n    }\n\n    return $res-&gt;render(\"employee/employee_view.php\");\n}\n</code></pre></p>"},{"location":"core-features/permission-system/#checking-permissions-while-rendering-the-page","title":"Checking permissions while rendering the page","text":"<p>To check if the requesting user has a permission, the user object in <code>$opt</code> can be used. It has a method called <code>checkPermission</code> that returns a boolean. Note that this is another method than <code>checkPermission</code> from the request object. This one does not redirect the user and can be used for example to determin if specific should be visible to the user on a page it generally has access to.</p>"},{"location":"core-features/permission-system/#view-example","title":"View example:","text":"<pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n\n    &lt;!-- Returns a bool if the user has the permission --&gt;\n    &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"employee.delete\")) { ?&gt;\n        &lt;button id=\"delete\"&gt;Delete&lt;/button&gt;\n    &lt;?php } ?&gt;\n\n    &lt;!-- Remaining code --&gt;\n&lt;?php }]; ?&gt;\n</code></pre>"},{"location":"core-features/rest-api/","title":"REST Responses","text":""},{"location":"core-features/rest-api/#what-is-this","title":"What is this?","text":"<p>As the client and the server are completely separated, they need to have a way communicated. It is basically a standardized way of transfering, in our case JSON data, from the server to the client.</p>"},{"location":"core-features/rest-api/#how-to-use-this","title":"How to use this?","text":"<p>There is a file called <code>z_rest.php</code>, which handles all the REST responses. You'll probably not be using this as another layer of abstraction exists within the response class. There are two functions regarding this topic. </p> Call zdoc <code>$res-&gt;generateRest</code> Here <code>$res-&gt;generateRestError</code> Here <code>$res-&gt;error</code> Here <code>$res-&gt;success</code> Here <p>You can also just use generateRest for errors. If the key result is set with the value error, it is automatically converted into a REST Error. The second parameter of generateRest called $die determines if the script exits after generating the REST response. The parameter is optional with a default value of true.</p>"},{"location":"core-features/rest-api/#example-calls","title":"Example Calls","text":""},{"location":"core-features/rest-api/#generaterest","title":"generateRest","text":"<p><pre><code>$res-&gt;generateRest([\n    \"response\" =&gt; \"RESPONSE\",\n    \"error\" =&gt; \"ERROR\"\n]);\n</code></pre> <pre><code>{ \"meta\": { \"endpoint\": \"REST API\", \"request\": \"URL\", \"timestamp\": 9999999 }, \"response\": \"hehe\", \"error\": \"ERROR\" }\n</code></pre></p>"},{"location":"core-features/rest-api/#generateresterror","title":"generateRestError","text":"<p><pre><code>$res-&gt;generateRestError(404, \"MESSAGE\");\n</code></pre> <pre><code>{ \"error\": { \"code\": 404, \"message\": \"MESSAGE\" } }\n</code></pre></p>"},{"location":"core-features/rest-api/#success","title":"success","text":"<p><pre><code>$res-&gt;success([\n    \"information\" =&gt; \"MESSAGE\"\n]);\n</code></pre> <pre><code>{ \"meta\": { \"endpoint\": \"REST API\", \"request\": \"URL\", \"timestamp\": 9999999 }, \"result\": \"success\", \"information\": \"MESSAGE\" }\n</code></pre></p>"},{"location":"core-features/rest-api/#error","title":"error","text":"<p><pre><code>$res-&gt;error(\"MESSAGE\");\n</code></pre> <pre><code>{ \"meta\": { \"endpoint\": \"REST API\", \"request\": \"URL\", \"timestamp\": 9999999 }, \"result\": \"error\", \"message\": \"MESSAGE\" }\n</code></pre></p>"},{"location":"core-features/views/","title":"Getting Started: Views","text":""},{"location":"core-features/views/#what-does-a-view-do","title":"What does a view do?","text":"<p>A view contains the html the user should see. All additional resources like css, images or javascript are also loaded from views. Views do usually not contain a footer, navigation, header or other elements that belong to the overall layout of the page. For this, layouts should be used as without a layout, a view can't be renderer. Read more about layouts here.</p> <p>Database access and heavy logic should not be used in the view as that belong into other parts of the application.</p>"},{"location":"core-features/views/#structure","title":"Structure","text":"<p>A view should be placed in the <code>z_views</code> directory of your project, otherwise it will not be found when called from the render method.</p> <p>It is a php file which returns an array with up to three attributes. <code>head</code> and <code>body</code> are functions that get executed in the layout at the matching place. <code>lang</code> is optional and holds language data useable by <code>$opt[\"lang\"]</code>.</p> <p><code>head</code> and <code>body</code> should accept a parameter called $opt. It contains data passed into the $opt parameter of the <code>render</code> method. For the view to communicate back to a controller, asynchronous methods must be used.</p>"},{"location":"core-features/views/#simple-example-view","title":"Simple example view","text":"<pre><code>&lt;?php return [\"body\" =&gt; function($opt) { ?&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;?php }]; ?&gt;\n</code></pre>"},{"location":"core-features/views/#example-view-using-a-passed-value-option","title":"Example view using a passed value / option","text":"<p><pre><code>// Controller\npublic function action_index(Request $req, Response $res) {\n    return $res-&gt;render(\"employee/employee_index.php\", [\n        \"value\" =&gt; \"Hello World\"\n    ]);\n}\n</code></pre> <pre><code>// View\n&lt;?php return [\"body\" =&gt; function($opt) { ?&gt;\n    &lt;h1&gt;$opt[\"value\"]&lt;/h1&gt;\n&lt;?php }]; ?&gt;\n</code></pre></p>"},{"location":"core-features/views/#complete-example-view-with-localization","title":"Complete example view with localization","text":"<pre><code>&lt;?php return [\"head\" =&gt; function($opt) { ?&gt;\n    &lt;title&gt;Mitarbeiterverwaltung&lt;/title&gt;\n&lt;?php }, \"body\" =&gt; function($opt) { ?&gt; \n    &lt;div class=\"card\"&gt;\n        &lt;div class=\"card-header\"&gt;\n            &lt;h1&gt;&lt;?= $opt[\"lang\"](\"header\") ?&gt;&lt;/h1&gt;\n        &lt;/div&gt;\n        &lt;div class=\"card-body\"&gt;\n            &lt;h1&gt;$opt[\"value\"]&lt;/h1&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;?php }, \"lang\" =&gt; [\n    \"en\" =&gt; [\n        \"header\" =&gt; \"Welcome!\"\n    ],\n    \"DE_Formal\" =&gt; [\n        \"header\" =&gt; \"Willkommen\"\n    ]\n]]; ?&gt;\n</code></pre> <p>More examples for views can be found in <code>z_framework/default/views</code>.</p>"},{"location":"forms/auto-form-validation/","title":"Auto form validation and database updates","text":"<p>This framework has the ability to create automatic generated forms with user feedback. These forms can be validated automatically on the server and if errors occur the feedback is sent back to the user. If no errors occur the data can be used to update a database table.</p>"},{"location":"forms/auto-form-validation/#front-end","title":"Front-end","text":"<p>To create the form on the frontend, use the Z.js library. An example form can be created with this code: <pre><code>var form = Z.Forms.create({dom: \"form\"});\n\nvar inputFirstName = form.createField({\n    name: \"first_name\",\n    type: \"text\",\n    text: \"First name\",\n    required: true\n});\n\nvar inputLastName = form.createField({\n    name: \"last_name\",\n    type: \"text\",\n    text: \"Last name\",\n    required: true\n});\n</code></pre></p>"},{"location":"forms/auto-form-validation/#creating-a-form","title":"Creating a form","text":"<p>The form is created with <code>Z.Forms.create</code>. The <code>dom</code> attribute takes the id of an html element in which the form in embedded. For this to work the element needs to be loaded so this script should not execute directly at the start of the page. If the element will spawns later the form can be added to it with the dom attribute <code>element.appendChild(form.dom);</code>.</p>"},{"location":"forms/auto-form-validation/#creating-fields","title":"Creating fields","text":"Attribute Description <code>name</code> Corresponds to the name in the post request. <code>type</code> The input type. Any valid HTML standard type is accepted, as well as <code>textarea</code> and <code>select</code>. This attribute does not affect server-side value parsing. <code>text</code> Label text for the input field. <code>value</code> Default value for the input field. <code>food</code> Required for <code>select</code> types. It defines the options available and is formatted as an array: <code>[{value: 1, text: \"one\"}, {value: 2, text: \"two\"}, ...]</code>. This array can be generated via <code>$controller-&gt;makeFood</code>. <code>required</code> Specifies whether the field is required. When set to <code>true</code>, the input must be filled before form submission. <code>width</code> Defines the width of the form element in 1/12 units of the total width. Effective on medium or larger devices. On small devices, the width is always 100%. <code>attributes</code> Allows adding additional attributes for the generated input element (e.g., <code>min</code>, <code>max</code> for number inputs). Example usage: <code>attributes: {'min': 1, 'max': 10}</code>. <code>prepend</code> Adds a visual element before the input field. This can be used for prefixes, labels, or other indicators. Example usage: prepend: 'Prefix' creates an input field with a preceding text or symbol."},{"location":"forms/auto-form-validation/#simple-input-example","title":"Simple input example","text":"<pre><code>var inputAmount = $form.createElement({\n    name: \"amount\",\n    type: \"number\",\n    attributes: {\n        min: 0,\n        max: 100,\n        step: 10\n    }\n});\n</code></pre>"},{"location":"forms/auto-form-validation/#manipulating-fields","title":"Manipulating fields","text":"<p>The return value if <code>form.createField</code> is the created field. It has an attribute called <code>input</code> which can be used to access the dom input element directly. It also has <code>on</code> which is an alias for addEventListener on the input dom element. The value can be read and set with <code>value</code>.</p> <p><code>form.addCustomHTML()</code>. With this you can add Html inside of the form.</p> <p><code>form.addSeperator()</code>. This inserts a simple <code>&lt;hr&gt;</code> element at the end of the current builded form.</p>"},{"location":"forms/auto-form-validation/#back-end","title":"Back-end","text":"<p>When the form is submitted, it will send an asynchronous post request to the current action specified by the current users url. To check in the action if the current request is from a form, <code>$req-&gt;hasFormData()</code> can be used. This is example code for handling a form:</p>"},{"location":"forms/auto-form-validation/#backend-validation","title":"Backend validation","text":"<pre><code>if ($req-&gt;hasFormData()) {\n    $formResult = $req-&gt;validateForm([\n        (new FormField(\"first_name\"))\n            -&gt;required()-&gt;length(1, 255),\n        (new FormField(\"last_name\"))\n            -&gt;required()-&gt;length(1, 255)\n    ]);\n\n    if ($formResult-&gt;hasErrors) {\n        return $res-&gt;formErrors($formResult-&gt;errors);\n    }\n}\n</code></pre>"},{"location":"forms/auto-form-validation/#validation-structure","title":"Validation structure","text":"<p><code>$req-&gt;hasFormData()</code> checks if there is any data in the request.</p> <p><code>$req-&gt;validateForm()</code> validates the values. As the first parameter it takes an array of fields to validate. To these field, rules can be attached.</p> <p><code>$formResult-&gt;hasErrors</code> returns true or false depended on the validation result of <code>$req-&gt;validateForm()</code>. If the validation fails, <code>$res-&gt;formErrors($formResult-&gt;errors)</code> will return the errors to the frontend, where they will be displayed.</p>"},{"location":"forms/auto-form-validation/#saving-functions","title":"Saving functions","text":"<p>Success will exit the current action. So before calling it the data should be processed by a model or <code>$res-&gt;updateDatabase()</code>. Update database will take the result object from the form validation to get the names in the database. If the name in the database column and the post differ, the database name can be set by the second parameter of the <code>constructor of FormField</code>.</p> <p><code>$res-&gt;insertDatabase()</code> can also be used to process the data. This method will create a dataset in a table given as argument. It works similar to <code>$res-&gt;updateDatabase()</code>.</p>"},{"location":"forms/auto-form-validation/#insertorupdatedatabase-example","title":"insertOrUpdateDatabase Example","text":"<p><code>$req-&gt;insertOrUpdateDatabase()</code> Adds a logic to check if the dataset already exists. <pre><code>public function action_manage(Request $req, Response $res) {\n    $req-&gt;checkPermission(\"employee.edit\");\n\n    // Get the employeeid from the URL\n    $employeeId = $req-&gt;getParameters(0, 1);\n    $employee = null;\n\n    if(!empty($employeeId)) {\n        $employee = $req-&gt;getModel(\"Employee\")-&gt;getById($employeeId);\n    }\n\n    if($req-&gt;hasFormData()) {\n        $formResult = $req-&gt;validateForm([\n            (new FormField(\"first_name\"))\n                -&gt;required()-&gt;length(1, 255),\n            (new FormField(\"last_name\"))\n                -&gt;required()-&gt;length(1, 255),\n            (new FormField(\"contact_email\"))\n                -&gt;required()-&gt;filter(FILTER_VALIDATE_EMAIL)-&gt;length(1, 255),\n            (new FormField(\"birthday\"))\n                -&gt;date(),\n            (new FormField(\"notes\")),\n            (new FormField(\"type\"))\n        ]);\n\n        if ($formResult-&gt;hasErrors) {\n            return $res-&gt;formErrors($formResult-&gt;errors);\n        }\n\n        // Insert the Employee with their datas or updates them if exist\n        $employeeId = $res-&gt;insertOrUpdateDatabase(\n            \"employee\",\n            \"id\", \"i\", $employee[\"id\"] ?? null,\n            $formResult,\n        );\n\n        // Send a response with the inserted/updated EmployeeId\n        return $res-&gt;success([\n            \"employeeId\" =&gt; $employeeId,\n        ]);\n    }\n\n    return $res-&gt;render(\"employee/employee_edit.php\", [\n        \"employee\" =&gt; $employee,\n        \"types\" =&gt; $this-&gt;makeFood(\n            $req-&gt;getModel(\"Employee\")-&gt;getTypes(),\n            \"id\", \"label\",\n        ),\n    ]);\n}\n</code></pre></p>"},{"location":"forms/auto-form-validation/#example-advanced-layout","title":"Example advanced layout","text":"<pre><code>&lt;div id=\"form\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    var form = Z.Forms.create({\n        dom: \"form\"\n    });\n\n    form.addCustomHTML(\"&lt;h2&gt;These Fields are required&lt;/h2&gt;\");\n\n    form.createField({\n        name: \"first_name\",\n        type: \"text\",\n        text: \"First name\",\n        required: true,\n        width: 6,\n        value: &lt;?= json_encode($opt[\"employee\"][\"first_name\"] ?? \"\") ?&gt;,\n    });\n\n    form.createField({\n        name: \"last_name\",\n        type: \"text\",\n        text: \"Last name\",\n        required: true,\n        width: 6,\n        value: &lt;?= json_encode($opt[\"employee\"][\"last_name\"] ?? \"\") ?&gt;,\n    });\n\n    form.createField({\n        name: \"contact_email\",\n        type: \"email\",\n        text: \"Email Address\",\n        required: true,\n        width: 6,\n        value: &lt;?= json_encode($opt[\"employee\"][\"contact_email\"] ?? \"\") ?&gt;,\n    });\n\n    form.createField({\n        name: \"type\",\n        type: \"select\",\n        text: \"Type\",\n        food: \"&lt;?= $opt['types'] ?&gt;\"\n    });\n\n    form.addSeperator();\n    form.addCustomHTML(\"&lt;h2&gt;These Fields are optional&lt;/h2&gt;\");\n\n    form.createField({\n        name: \"birthday\",\n        type: \"date\",\n        text: \"Geburtstag\",\n        width: 6,\n        value: &lt;?= json_encode($opt[\"employee\"][\"birthday\"] ?? \"\") ?&gt;\n    });\n\n    form.createField({\n        name: \"notes\",\n        type: \"textarea\",\n        text: \"Notizen\",\n        attributes: {\n            rows: 5,\n        }\n    });\n\n    form.saveHook = (res) =&gt; {\n        location.href = \"&lt;?= $opt[\"root\"] ?&gt;employee/manage/\" + res.employeeId;\n    };\n\n    $(form.buttonSubmit).html(\"Send\");\n&lt;/script&gt;\n</code></pre>"},{"location":"forms/auto-form-validation/#supported-types","title":"Supported types:","text":"<ul> <li>All default HTML types</li> <li>Additionally supported::<ul> <li>textarea</li> <li>select</li> <li>autocomplete</li> </ul> </li> </ul>"},{"location":"forms/auto-form-validation/#autocomplete","title":"Autocomplete","text":"<p>The <code>autocomplete</code> type creates a text input with an additional feature: it displays suggestions based on predefined data as the user types.</p>"},{"location":"forms/auto-form-validation/#example","title":"Example","text":"<pre><code>&lt;div id=\"form\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    var form = Z.Forms.create({\n        dom: \"form\"\n    });\n\n    form.createField({\n        name: 'favoriteFruit',\n        type: 'autocomplete',\n        autocompleteData: ['Apple', 'Banana', 'Cherry', 'Dragonfruit'],\n    });\n&lt;/script&gt;\n</code></pre>"},{"location":"forms/auto-form-validation/#advanced-example","title":"Advanced Example","text":"<pre><code>public function action_favourite(Request $req, Response $res) {\n    $value = $req-&gt;getPost(\"value\");\n\n    return $res-&gt;generateRest([\n        \"data\" =&gt; $req-&gt;getModel(\"Fruits\")-&gt;getByValue($value)\n    ]);\n}\n</code></pre> <pre><code>// View\n&lt;div id=\"form\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    var form = Z.Forms.create({\n        dom: \"form\"\n    });\n\n    let placeSearch = form.createField({\n        name: \"favouriteFruits\",\n        type: \"autocomplete\",\n        autocompleteData: \"fruits/favourite\",   // The Endpoint you're trying to get your data from\n        autocompleteMinCharacters: 2,           // The number of characters you need to type in to get the first autocomplete data\n        autocompleteTextCB: (text, value) =&gt; {  // This will be called when autocomplete data is found\n            let json = JSON.parse(value);\n            return json.text;\n        },\n\n        autocompleteCB: (text) =&gt; {             // This will be called when you click on the word suggestion\n            let json = JSON.parse(text);\n            placeSearch.input.value = json.text;\n        },\n    });\n&lt;/script&gt;\n</code></pre>"},{"location":"forms/auto-form-validation/#select","title":"Select","text":"<p>The <code>select</code> type generates a dropdown menu and automatically populates it with options. This feature leverages a function called makeFood, which is used in the controllers.</p>"},{"location":"forms/auto-form-validation/#example_1","title":"Example","text":"<pre><code>// Controller\nreturn $res-&gt;render(\"employee/employee_edit.php\", [\n    \"types\" =&gt; $this-&gt;makeFood(\n        $req-&gt;getModel(\"Employee\")-&gt;getTypes(),\n        \"id\", \"label\",\n    ),\n]);\n</code></pre> <pre><code>// View\n&lt;div id=\"form\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    var form = Z.Forms.create({\n        dom: \"form\"\n    });\n\n    // Manually written food\n    form.createField({\n        name: 'favoriteFruit',\n        type: 'select',\n        food: [\n            {value: \"1\", text: \"Apple\"},\n            {value: \"2\", text: \"Banana\"},\n            {value: \"3\", text: \"Cherry\"},\n            {value: \"4\", text: \"Dragonfruit\"}\n        ],\n    });\n\n    // Auto generated food\n    form.createField({\n        name: 'types',\n        type: 'select',\n        food: &lt;?= $opt[\"types\"] ?&gt;,\n    });\n\n    // Advanced Example with optgroups\n    form.createField({\n        name: 'favoriteFruitVegetables',\n        type: 'select',\n        food: [\n            {type: \"optgroup\", text: \"Vegetables\"},\n            {value: \"1\", text: \"Carrot\"},\n            {value: \"2\", text: \"Broccoli\"},\n            {value: \"3\", text: \"Spinach\"},\n            {type: \"optgroup\", text: \"Fruits\"},\n            {value: \"4\", text: \"Apple\"},\n            {value: \"5\", text: \"Banana\"},\n            {value: \"6\", text: \"Orange\"},\n        ],\n    });\n&lt;/script&gt;\n</code></pre>"},{"location":"forms/ced-validation/","title":"Auto form validation using CED","text":"<p>Some forms require the user to input multiple values into one field. Or to create multiple blocks or something. For every case this happens the CED system can be used. CED stands for **C**reate **E**dit **D**elete. It builds on top of the form system.</p>"},{"location":"forms/ced-validation/#front-end","title":"Front-end","text":"<p>This is an example for adding permissions to a group. It is possible to have n permissions per group. <pre><code>var form = Z.Forms.create({dom: \"form\"});\n\nform.createCED({\n    name: \"permissions\",\n    text: \"&lt;?php $opt[\"lang\"](\"permissions\"); ?&gt;\",\n    fields: [{ \n        name: \"name\", \n        type: \"text\", \n        text: \"&lt;?php $opt[\"lang\"](\"permission\"); ?&gt;\"\n    }],\n    value: &lt;?php echo $opt[\"permissions\"]; ?&gt;\n});\n</code></pre> <code>form.createCED</code> is a method from ZForm. It takes the same parameters as <code>form.createField</code>. The only special one is <code>fields</code>. <code>fields</code> takes an array of form field parameters. All form fields are build like in <code>form.createField</code>.</p> <p><code>value</code> takes an value created by <code>$controller-&gt;makeCEDFood()</code>.</p> <p>To create more compact forms, the attribute <code>compact</code> can be set to true. On form fields it will hide the label. In CED's it allows to have the remove button at the right. When using the compact mode, the inputs should have a total combined length of 11 units because the remove button will take exactly one.</p>"},{"location":"forms/ced-validation/#back-end","title":"Back-end","text":"<p>The backend code for the example mentioned before: <pre><code>if ($req-&gt;hasFormData()) {\n\n    $formResult = $req-&gt;validateCED(\"permissions\", [\n        (new FormField(\"name\")) -&gt; required() -&gt; length(3, 100)\n    ]);\n\n    if ($formResult-&gt;hasErrors) {\n        $res-&gt;formErrors($formResult-&gt;errors);\n    } else {\n        $res-&gt;doCED(\"z_role_permission\", $formResult, [\"role\" =&gt; $roleId]);\n        $res-&gt;success();\n    }\n}\n</code></pre> <code>$req-&gt;validateCED</code> takes the name of the CED field at the frontend as the first parameter. The second parameter is equal to the ruleset in <code>$req-&gt;validateForm</code>. The difference here is that the rules will be applied for all items in the ced. The return value can also be used like of the normal <code>validateForm</code> method for error reporting.</p> <p>Instead of <code>$res-&gt;updateDatabase</code>, CED's use <code>$res-&gt;doCED</code> to update the database. The first parameter is the name of the table. It is important that the table has a field named <code>active</code>. This will be used to deterime if a dataset was removed. The other fields should have the same names as the subinputs of the form.</p>"},{"location":"forms/file-uploads/","title":"Working with file uploads","text":""},{"location":"forms/file-uploads/#manual","title":"Manual","text":"<p>Sometimes it is needed that a user uploads a file. To handle incoming files, response has the <code>upload()</code> method. It returns a <code>z_upload</code> object which has more methods to handle with uploads.</p> <pre><code>$upload = $res-&gt;upload();\nif ($upload-&gt;upload($_FILES[\"file\"], \"uploads/\", FILE_SIZE_100GB, [\"txt\", \"jpg\", \"png\"])) {\n    $res-&gt;error();\n}\n\n$fileId = $upload-&gt;fileId;\n</code></pre> <p><code>$file</code> is the file in <code>$_FILES</code>. <code>$uploadDir</code> is the directory to place the file in. Ending with <code>/</code>. <code>$maxSize</code> is the max file size. For some values there are already constants in the framework. <code>$typeArray</code> array of accepted file types.</p>"},{"location":"forms/file-uploads/#using-z-forms","title":"Using Z-Forms","text":"<p>When using Z-Forms, files will be stored and error feedback automatically goes back to the user. For file uploads there is the special rule <code>file()</code>. <pre><code>(new FormField(\"file\")) -&gt; file(FILE_SIZE_1MB, [\"txt\", \"jpg\", \"png\"])\n</code></pre> Files uploaded with this method will always be moved into the \"uploads/\" directory.</p>"},{"location":"frontend-integration/backend-requests/","title":"Using Z.Request","text":"<p>The default JavaScript API of this framework does have a function to send asynchronous requests to the server and get data back.</p>"},{"location":"frontend-integration/backend-requests/#front-end","title":"Front-end","text":"<p><pre><code>$(\".delete-employee\").click(function() {\n    let selectedEmployee = $(this).data(\"id\");\n\n    Z.Request.action('delete-employee', {\n        'employeeId': selectedEmployee\n    }, (res) =&gt; {\n        if(res.result == 'success') {\n            location.reload();\n            return;\n        }\n    });\n});\n</code></pre> <code>Z.Request.action</code> takes three parameters. The first one is the identifier of the action as string. The second is a object containing post parameters. The third is a callback which only parameter is the REST response of the server.</p>"},{"location":"frontend-integration/backend-requests/#back-end","title":"Back-end","text":"<p><pre><code>public function action_list(Request $req, Response $res) {\n    if ($req-&gt;isAction(\"delete-employee\")) {\n        $employeeId = $req-&gt;getPost(\"employeeId\");\n\n        $req-&gt;getModel(\"Employee\")-&gt;deleteById($employeeId);\n        return $res-&gt;success();\n    }\n\n    &lt;!-- Remaining code --&gt;\n    return $res-&gt;render(\"employee/list.php\");\n}\n</code></pre> <code>$req-&gt;isAction()</code> detects if this Request was initiated by an async action call with a specified identifier. Note that these actions are not the same as the ones in the controller. They work a level higher. <code>$res-&gt;generateRest</code> will create a parsable answer for the client.</p>"},{"location":"frontend-integration/presets/","title":"Z Preset: Login and Register","text":"<p>The default JavaScript API of this framework (which is included in all views using a properly setup layout) contains presets for some core functionality of a web page.</p> <p>For these two examples it is important that the default loginController is used.</p>"},{"location":"frontend-integration/presets/#creating-a-login","title":"Creating a login","text":"<p>This is the basic layout for a login page: <pre><code>&lt;div id=\"login-error-label\"&gt;&lt;/div&gt;\n\n&lt;label for=\"input-email\"&gt;Email: &lt;/label&gt;\n&lt;input id=\"input-email\" type=\"email\"&gt;\n\n&lt;label for=\"input-password\"&gt;Password: &lt;/label&gt;\n&lt;input id=\"input-password\" type=\"password\"&gt;\n\n&lt;button id=\"button-login\"&gt;Log in&lt;/button&gt;\n\n&lt;script&gt;\n    document.getElementById(\"button-login\").addEventListener(\"click\", () =&gt; {\n        Z.Presets.Login(\"input-email\", \"input-password\", \"login-error-label\");\n    });\n&lt;/script&gt;\n</code></pre> For this to work, three elements are needed. One error output label for reporting to the user if the login failed, and two inputs. The labels are technically not needed here as well as the button.</p> <p>To trigger the login action there is the function <code>Z.Presets.Login</code>. It takes the ids of the DOM elements as inputs.</p> <p>Optionally a fourth argument can be passed into the login function that gives the url to redirect to after a successfull login. This parameter should be absolute. Example: <pre><code>document.getElementById(\"button-login\").addEventListener(\"click\", () =&gt; {\n    Z.Presets.Login(\"input-username\", \"input-password\", \"login-error-label\", \"&lt;?php echo $opt[\"root\"]; ?&gt;\");\n});\n</code></pre></p>"},{"location":"frontend-integration/presets/#creating-a-signup-form","title":"Creating a signup form","text":"<p>This is the basic layout for a singup page: <pre><code>&lt;div id=\"login-error-label\"&gt;&lt;/div&gt;\n\n&lt;label for=\"input-email\"&gt;Username: &lt;/label&gt;\n&lt;input id=\"input-username\" type=\"text\"&gt;\n\n&lt;label for=\"input-password\"&gt;Password: &lt;/label&gt;\n&lt;input id=\"input-password\" type=\"password\"&gt;\n\n&lt;label for=\"input-password-confirm\"&gt;Confirm Password: &lt;/label&gt;\n&lt;input id=\"input-password-confirm\" type=\"password\"&gt;\n\n&lt;button id=\"button-signup\"&gt;Sign up&lt;/button&gt;\n\n&lt;script&gt;\n    document.getElementById(\"button-signup\").addEventListener(\"click\", () =&gt; {\n        Z.Presets.Signup(\"input-username\", \"input-password\", \"input-password-confirm\", \"login-error-label\", \"&lt;?php echo $opt[\"root\"]; ?&gt;\");\n    });\n&lt;/script&gt;\n</code></pre> Here the important method is <code>Z.Presets.Signup</code>. It works similar to login.</p>"},{"location":"guides/email/","title":"Email Guide","text":"<p>In the previous guide, we learned how to create and use layouts to structure our websites effectively.</p> <p>In this guide, we'll delve into the process of sending emails, a crucial functionality for web applications to communicate with users, whether for notifications, confirmations, or newsletters.</p> <p>The ZubZet framework makes email handling straightforward and efficient. Let\u2019s explore how to implement it!</p>"},{"location":"guides/email/#resources","title":"Resources","text":"Controller  EmailController <pre><code>&lt;?php\n    class EmailController extends z_controller {\n\n        public function action_email(Request $req, Response $res) {\n           // Here we will send our Email\n        }\n\n        public function action_emailuser(Request $req, Response $re) {\n            // Here we will send our Email\n        }\n    }\n?&gt;\n</code></pre> Layout email_layout <pre><code>&lt;?php return [\"layout\" =&gt; function($opt, $body, $head) { ?&gt;\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en\"&gt;\n        &lt;head&gt;\n            &lt;?php $head($opt); ?&gt;\n        &lt;/head&gt;\n        &lt;body class=\"d-flex flex-column min-vh-100\"&gt;\n            &lt;h2&gt;EMail Layout&lt;/h2&gt;\n\n            &lt;main class=\"container mt-5\"&gt;\n                &lt;?php $body($opt); ?&gt;\n            &lt;/main&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n&lt;?php }] ?&gt;\n</code></pre> View email <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;h2&gt;This is an test email&lt;/h2&gt;\n&lt;?php }]; ?&gt;\n</code></pre>"},{"location":"guides/email/#setting-up-our-application","title":"Setting up our Application","text":"<p>To start working with emails, we first need the basic structure of our application. This guide provides pre-built files in the Resources section, including templates for controllers, layouts, and views. Using these resources ensures an organized setup and allows us to focus on sending emails.</p>"},{"location":"guides/email/#setting-up-our-mail-system","title":"Setting up our Mail System","text":"Setting up a test SMTP Server <p>To send emails during development for testing purposes, it's better to simulate email sending rather than actually sending them. To do this, simply use the following values for the attributes:</p> <ul> <li><code>mail_smtp</code> = ENV</li> <li><code>mail_from</code> = ENV</li> <li><code>mail_user</code> = ENV</li> <li><code>mail_password</code> = ENV</li> <li><code>mail_security</code> = false</li> </ul> <p>To verify if your emails are being sent correctly, you can navigate to <code>localhost:3300</code>. This is a default interface for email testing, which are commonly used in development environments to capture and inspect outgoing emails without actually sending them.</p> <p>Before sending emails, configure your SMTP server. The configuration is located in the <code>z_config/z_settings.ini</code> file, where parameters like <code>mail_smtp</code> need to be set up.</p>"},{"location":"guides/email/#sending-emails","title":"Sending Emails","text":"<p>Emails are sent from controllers, and the ZubZet framework provides two methods for this purpose:</p> <ol> <li> <p><code>sendEmail</code>: This method allows you to send an email to a custom email address. It accepts the following parameters:</p> <ol> <li><code>to</code>: The recipient's email address.</li> <li><code>subject</code>: The email subject.</li> <li><code>document</code>: The view file to use for the email body.</li> <li><code>lang</code>: The language of the email.</li> <li><code>options</code>: An array of values to pass to the view file.</li> <li><code>layout</code>: The layout file to use for the email.</li> <li><code>attachments</code>: Any files to attach to the email.</li> </ol> </li> <li> <p><code>sendEmailToUser</code>: This method is used to send an email directly to a registered user by specifying their user ID. It accepts the following parameters:</p> <ol> <li><code>userId</code>: The ID of the user to whom the email will be sent.</li> <li><code>subject</code>: The email subject.</li> <li><code>document</code>: The view file for the email body.</li> <li><code>options</code>: An array of values to pass to the view file.</li> <li><code>layout</code>: The layout file for the email.</li> </ol> </li> </ol> <p>For the email layout, it is essential that the filename ends with <code>_layout.php</code>; otherwise, the file will not be recognized by the framework. This naming convention ensures the layout file is correctly located and applied during email rendering.</p>"},{"location":"guides/email/#example","title":"Example","text":"<pre><code>&lt;?php\n    class EmailController extends z_controller {\n\n        public function action_email(Request $req, Response $res) {\n           $res-&gt;sendEmail(\n                \"user@example.com\",             // Recipient\n                \"Welcome to our service!\",      // Subject\n                \"email/email\",                  // View file\n                \"en\",                           // Language\n                [\n                    \"name\" =&gt; \"John Doe\"        // Options\n                ],\n                \"email_layout.php\",             // Layout file\n            );\n        }\n\n        public function action_emailuser(Request $req, Response $re) {\n            $res-&gt;sendEmailToUser(\n                123,                           // User ID\n                \"Your subscription is active\", // Subject\n                \"email/email\",                 // View file\n                [\n                    \"plan\" =&gt; \"Premium\"        // Options\n                ],\n                \"email_layout.php\"             // Layout file\n            );\n        }\n    }\n?&gt;\n</code></pre>"},{"location":"guides/guest-list/","title":"Guest List Application","text":"<p>This guide will walk you through the creation of a simple guest list application step-by-step. This application allows you to display their details. You will learn the basic functions of the framework and how to use them effectively in your application.</p>"},{"location":"guides/guest-list/#resources","title":"Resources","text":"Database <pre><code>CREATE TABLE `guest` (\n    `id` INT AUTO_INCREMENT PRIMARY KEY,\n    `first_name` VARCHAR(255) NOT NULL,\n    `last_name` VARCHAR(255) NOT NULL,\n    `email` VARCHAR(255) NOT NULL.\n    `active` TINYINT NOT NULL DEFAULT 1,\n    `created` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <pre><code>INSERT INTO `guest` (`first_name`, `last_name`, `email`) VALUES\n('Michael', 'Hill', 'michael.hill@example.com'),\n('Julia', 'Conner', 'julia.conner@example.com'),\n('Michael', 'Price', 'michael.price@example.com'),\n('Kyle', 'Reyes', 'kyle.reyes@example.com'),\n('Russell', 'Moore', 'russell.moore@example.com'),\n('Jessica', 'Green', 'jessica.green@example.com'),\n('Emily', 'Davis', 'emily.davis@example.com'),\n('Laura', 'Smith', 'laura.smith@example.com'),\n('James', 'Brown', 'james.brown@example.com'),\n('Emma', 'Johnson', 'emma.johnson@example.com');\n</code></pre>"},{"location":"guides/guest-list/#setting-up-the-database","title":"Setting up the Database","text":"What is Migration and what is Seed? <p>Migration refers to the process of modifying a database's structure, such as adding, removing, or altering tables and columns. Migration files document these changes and allow them to be applied automatically across different environments, ensuring the database structure remains consistent and versioned.</p> <p>Seeding is the process of populating a database with sample or test data. It is commonly used in development and testing environments to provide realistic data for testing or to initialize the database with predefined values for consistency. Seeding is often used alongside migrations to set up the database.</p> <p>To define the database structure, go to the <code>database/migrations</code> folder. Create a file named <code>[DATE]_guest.sql</code>, replacing <code>[DATE]</code> with the current date in the format <code>YYYY-MM-DD</code>. Then, paste the <code>CREATE TABLE</code> statement from the Resources section into the file. </p> <p>To add initial data, go to the <code>database/seeds</code> folder. Create a file named <code>guest.sql</code> and paste the <code>INSERT INTO</code> statement from the Resources section.</p> <p>This separates the database structure and seed data, keeping your setup organized. While the file names are customizable, it is recommended to follow a clear and consistent naming convention, such as including the date and a descriptive name.</p>"},{"location":"guides/guest-list/#setting-up-the-controller","title":"Setting up the Controller","text":"What is a Controller and what is an Action? <p>A Controller is a component of the MVC (Model-View-Controller) pattern that manages the flow of data between the model and the view. It processes user requests, executes business logic, interacts with the model to retrieve or update data, and sends the appropriate response or view back to the user. This separation of concerns ensures maintainability and clarity in application development.</p> <p>An Action is a specific method within a controller that is responsible for executing a particular task or process in response to a user request. Actions are mapped to URL routes and determine the logic to be performed for a given endpoint, such as processing input data, applying business rules, or initiating a redirect.</p> <p>More information can be found here</p> <p>To handle all requests, we need to create a Controller. For this example, create a file named <code>GuestsController.php</code> in the <code>z_controllers</code> folder. The file name, controller name, and action name are flexible but should be chosen for clear, logical understanding and consistency.</p> <p><pre><code>&lt;?php\n    class GuestsController extends z_controller {\n\n    }\n?&gt;\n</code></pre> Every controller follows this structure. It is important that the class name matches the file name and that it extends <code>z_controller</code>.</p> <p>To handle a request, you also need to define a method for the specific action: <pre><code>&lt;?php\n    class GuestsController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n\n        }\n    }\n?&gt;\n</code></pre></p>"},{"location":"guides/guest-list/#setting-up-the-model","title":"Setting up the Model","text":"What is a Model <p>A Model is a core component of the MVC (Model-View-Controller) pattern that represents the data structure and business logic for data processing. It is responsible for interacting with the database or other storage mediums to retrieve, store, update, or delete data. The model abstracts the data logic, allowing other components like controllers and views to work with the data seamlessly.</p> <p>The purpose of a Model is to separate data management and business logic from other layers, ensuring cleaner, more maintainable code. By centralizing database interactions, models promote reusability, reduce duplication, and enhance security, while allowing controllers to focus on application flow and views on presentation.</p> <p>More information can be found here</p> <p>To interact with the database where the guests are stored, we need a Model. For this example, create a file named <code>GuestsModel.php</code> in the <code>z_models</code> folder. You have flexibility in the naming of the file and model, but it is best to use a clear and logical structure for better understanding.</p> <p><pre><code>&lt;?php\n    class GuestsModel extends z_model {\n\n    }\n?&gt;\n</code></pre> Every model is structured similarly. Again, it is crucial that the class name matches the file name and that it extends <code>z_model</code>. To fetch data from the database, create a method named <code>getGuests()</code>:  </p> <p><pre><code>&lt;?php\n    class GuestsModel extends z_model {\n        public function getGuests(): array {\n            $sql = \"SELECT *\n                    FROM `guests`\";\n\n            $guestList = $this-&gt;exec($sql)-&gt;resultToArray();\n\n            return $guestList;\n        }\n    }\n?&gt;\n</code></pre> The function name is up to you, but adhering to meaningful, consistent names is important for clarity and maintainability.</p>"},{"location":"guides/guest-list/#explanation","title":"Explanation","text":"<ol> <li>SQL Query: Define the SQL query to retrieve the data.  </li> <li>Execute Query: Use the exec function to execute the query.  </li> <li>Process Results: Convert the query results into an array with resultToArray.  </li> <li>Return Data: Return the guest list for further use.</li> </ol>"},{"location":"guides/guest-list/#connecting-the-controller-and-model","title":"Connecting the Controller and Model","text":"<p>In the controller, call the model method to retrieve the data. Here's how: <pre><code>&lt;?php\n    class GuestsController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n            $guests = $req-&gt;getModel('Guests')-&gt;getGuests();\n        }\n    }\n?&gt;\n</code></pre> Here, we get the Guests model and call the <code>getGuests()</code> method to retrieve the list of guests. If you have named your model or function differently, be sure to substitute the values with the appropriate names reflecting your implementation.</p> <p>Finally, we need to render a view and pass the guest list to it.</p>"},{"location":"guides/guest-list/#creating-the-view","title":"Creating the View","text":"What is a View <p>A View is a key part of the MVC (Model-View-Controller) pattern responsible for presenting data to the user. It defines the structure and layout of the user interface, rendering dynamic content based on data provided by the controller. Views focus solely on presentation, avoiding business logic or direct data handling, to ensure a clean separation of concerns.</p> <p>More information can be found here</p> <p>To create a view, add a folder named <code>guests</code> in the <code>z_views</code> folder and inside this folder add a file named <code>guests_list.php</code>: <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n\n&lt;?php }]; ?&gt;\n</code></pre> All views follow this structure. Between the <code>?&gt;</code> and <code>&lt;?php</code> tags, you will add your HTML content. The file name should be intuitive and descriptive for easy identification.</p> <p>In the controller, render the view like this: <pre><code>&lt;?php\n    class GuestsController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n            $guests = $req-&gt;getModel('Guests')-&gt;getGuests();\n\n            return $res-&gt;render(\"guests/guests_list.php\", [\n                \"guests\" =&gt; $guests\n            ]);\n        }\n    }\n?&gt;\n</code></pre> A controller doesn't always need to render a view. It can handle tasks like processing requests, returning JSON for APIs, or triggering background processes.</p>"},{"location":"guides/guest-list/#explanation_1","title":"Explanation","text":"<ul> <li>render: Use this method to render a view file.</li> <li>Variables: Pass variables (like the guest list) as the second parameter to make them available in the view.</li> </ul>"},{"location":"guides/guest-list/#displaying-guests-in-the-view","title":"Displaying Guests in the View","text":"<p>Create an HTML table to display the guests, with columns for <code>First Name</code>, <code>Last Name</code>, and <code>Email</code>:</p> <p><pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;First Name&lt;/th&gt;\n                &lt;th&gt;Last Name&lt;/th&gt;\n                &lt;th&gt;Email&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;?php }]; ?&gt;\n</code></pre> To populate the table with guest data, loop through the <code>guests</code> array: <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;First Name&lt;/th&gt;\n                &lt;th&gt;Last Name&lt;/th&gt;\n                &lt;th&gt;Email&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;?php foreach ($opt[\"guests\"] as $guest) { ?&gt;\n\n            &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;?php }]; ?&gt;\n</code></pre> Now, for each guest, add a row displaying their details: <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;First Name&lt;/th&gt;\n                &lt;th&gt;Last Name&lt;/th&gt;\n                &lt;th&gt;Email&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;?php foreach ($opt[\"guests\"] as $guest) { ?&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;?= $guest[\"first_name\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $guest[\"last_name\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $guest[\"email\"] ?&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;?php }]; ?&gt;\n</code></pre> The use of <code>$guest[\"first_name\"]</code> corresponds to the column names defined in the database. These identifiers map the data retrieved from the database to the respective fields for display in the view.</p>"},{"location":"guides/guest-list/#summary","title":"Summary","text":"<ul> <li>Model: Define the database query in the model.</li> <li>Controller: Fetch the data and render the view.</li> <li>View: Display the data in an HTML table.</li> </ul> <p>This simple application demonstrates how to connect a model, controller, and view to create a guest list application. To start your Website run \"npm run start\" inside your terminal. And to view your result, navigate to <code>http://localhost:8080/Guests/list</code> in your browser.</p>"},{"location":"guides/guest-list/#next-guide","title":"Next Guide","text":"<p>In the next guide, we\u2019ll take a closer look at how to secure your website using roles and permissions. This is a key step to make sure that only authorized users can access certain features or parts of your application. By setting up roles and assigning specific permissions, you\u2019ll create a solid system to manage access and keep your website both secure and organized.  </p> <p>Library</p>"},{"location":"guides/layout/","title":"Layout Guide","text":"<p>In the previous guide, we explored how to create and manage forms effectively.</p> <p>In this guide, we'll focus on using layouts, a powerful feature in the ZubZet framework. Layouts help you structure your application by organizing your website into distinct sections, such as a Main Page and an Admin Panel, ensuring a consistent look and feel across multiple pages.</p>"},{"location":"guides/layout/#resources","title":"Resources","text":"Controller  ViewController <pre><code>&lt;?php\n    class ViewController extends z_controller {\n\n        public function action_custom(Request $req, Response $res) {\n            // Here we will render our custom layout\n        }\n\n        public function action_default(Request $req, Response $res) {\n            return $res-&gt;render(\"view/view\");\n        }\n    }\n?&gt;\n</code></pre> View view <pre><code>&lt;?php return [ \"body\" =&gt; function($opt) { ?&gt;\n    &lt;a&gt;This is the view&lt;/a&gt;\n&lt;?php }]; ?&gt;\n</code></pre>"},{"location":"guides/layout/#setting-up-our-application","title":"Setting up our Application","text":"<p>To start working with permissions, we first need the basic structure of our application. This guide provides pre-built files in the Resources section, including templates for controllers and views. Using these resources ensures an organized setup and allows us to focus on implementing functionality and layouts.</p>"},{"location":"guides/layout/#creating-a-layout","title":"Creating a Layout","text":"<p>Layouts in the ZubZet framework are defined as PHP files within the <code>z_views</code> folder. Below is the basic structure of a layout file: <pre><code>&lt;?php return [\"layout\" =&gt; function($opt, $body, $head) { ?&gt;\n\n&lt;?php }] ?&gt;\n</code></pre></p> <p>You can add your HTML and framework-related logic within this structure. For instance: <pre><code>&lt;?php return [\"layout\" =&gt; function($opt, $body, $head) { ?&gt;\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en\"&gt;\n        &lt;head&gt;\n            &lt;link rel=\"stylesheet\" href=\"assets/css/bootstrap.min.css\"&gt;\n        &lt;/head&gt;\n        &lt;body class=\"d-flex flex-column min-vh-100\"&gt;\n            &lt;h2&gt;Adminpanel&lt;/h2&gt;\n\n            &lt;main class=\"container mt-5\"&gt;\n\n            &lt;/main&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n&lt;?php }] ?&gt;\n</code></pre></p> <p>To display specific views dynamically, utilize the <code>$body</code> and <code>$head</code> variables: <pre><code>&lt;?php return [\"layout\" =&gt; function($opt, $body, $head) { ?&gt;\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en\"&gt;\n        &lt;head&gt;\n            &lt;?php $head($opt); ?&gt;\n            &lt;link rel=\"stylesheet\" href=\"assets/css/bootstrap.min.css\"&gt;\n        &lt;/head&gt;\n        &lt;body class=\"d-flex flex-column min-vh-100\"&gt;\n            &lt;h2&gt;Adminpanel&lt;/h2&gt;\n\n            &lt;main class=\"container mt-5\"&gt;\n                &lt;?php $body($opt); ?&gt;\n            &lt;/main&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n&lt;?php }] ?&gt;\n</code></pre></p>"},{"location":"guides/layout/#explanation","title":"Explanation","text":"<ul> <li>Everything between <code>&lt;?php return [\"layout\" =&gt; function($opt, $body, $head) { ?&gt;</code> and <code>&lt;?php }] ?&gt;</code> will be our html code we want to render.</li> <li><code>&lt;?php $head($opt); ?&gt;</code> integrates the <code>&lt;head&gt;</code> section of the view.</li> <li><code>&lt;?php $body($opt); ?&gt;</code> renders the view content within the body.</li> </ul>"},{"location":"guides/layout/#rendering-a-layout-with-a-view","title":"Rendering a Layout with a View","text":"<p>To apply a layout to a view file, pass the layout file path as the third parameter to the <code>$res-&gt;render</code> method: <pre><code>&lt;?php\n    class ViewController extends z_controller {\n\n        public function action_admin(Request $req, Response $res) {\n            return $res-&gt;render(\"view/view\", [], \"view/layout.php\");\n        }\n\n        public function action_user(Request $req, Response $res) {\n            return $res-&gt;render(\"view/view\");\n        }\n    }\n?&gt;\n</code></pre> In this example, the same view file is rendered twice\u2014once with a custom layout <code>(view/layout.php)</code> and once with the <code>default layout</code>.</p>"},{"location":"guides/layout/#editing-the-default-layout","title":"Editing the Default Layout","text":"<p>The framework's default layout, located at <code>z_views/layout/default_layout.php</code>, is automatically used if no other layout is specified. This layout can be modified to include common components such as navigation bars, footers, or any other elements that should appear across pages without custom layouts.</p>"},{"location":"guides/layout/#next-guide","title":"Next Guide","text":"<p>In the next guide, we will learn how to send emails and configure our SMTP server.</p> <p>Email</p>"},{"location":"guides/library/","title":"Library Application","text":"<p>In the last guide, we learned how to set up basic controllers, models and views to display data from the database. We focused on how to structure a project and create a simple output.</p> <p>In this guide, we\u2019ll explore how to add permissions and security to your application. Using a Library example, we will ensure that only authorized users can access specific parts of the application. This will give you a strong foundation in managing user roles and permissions within your projects.</p>"},{"location":"guides/library/#resources","title":"Resources","text":"Database <pre><code>CREATE TABLE `book` (\n    `id` INT AUTO_INCREMENT PRIMARY KEY,\n    `author` VARCHAR(255) NOT NULL,\n    `title` VARCHAR(255) NOT NULL,\n    `description` TEXT NOT NULL,\n    `active` TINYINT NOT NULL DEFAULT 1,\n    `created` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <pre><code>INSERT INTO `book` (`title`, `author`, `description`) VALUES\n('1984', 'George Orwell', 'A dystopian novel about a totalitarian regime.'),\n('To Kill a Mockingbird', 'Harper Lee', 'A classic novel about racial injustice in the Deep South.'),\n('The Great Gatsby', 'F. Scott Fitzgerald', 'A tale of ambition, love, and the American Dream.'),\n('Moby Dick', 'Herman Melville', 'A gripping story about a man\u2019s obsession with a great white whale.'),\n('Pride and Prejudice', 'Jane Austen', 'A romantic novel critiquing British society of the early 19th century.'),\n('The Catcher in the Rye', 'J.D. Salinger', 'A story about teenage rebellion and identity.'),\n('The Hobbit', 'J.R.R. Tolkien', 'A fantasy adventure about a hobbit\u2019s journey to recover treasure.'),\n('Brave New World', 'Aldous Huxley', 'A novel exploring a futuristic world shaped by technology and control.'),\n('The Road', 'Cormac McCarthy', 'A post-apocalyptic story of survival and father-son bonding.'),\n('Frankenstein', 'Mary Shelley', 'A gothic novel about the consequences of playing God.');\n</code></pre> Controller     LibraryController     <pre><code>&lt;?php\n    class LibraryController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n            $books = $req-&gt;getModel(\"Library\")-&gt;getBooks();\n\n            return $res-&gt;render(\"library/list\", [\n                \"books\" =&gt; $books\n            ]);\n        }\n    }\n?&gt;\n</code></pre> Model     LibraryModel     <pre><code>&lt;?php\n    class LibraryModel extends z_model {\n\n        public function getBooks() {\n            $sql = \"SELECT *\n                    FROM `book`\";\n            return $this-&gt;exec($sql)-&gt;resultToArray();\n        }\n    }\n?&gt;\n</code></pre> View     list     <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Author&lt;/th&gt;\n                &lt;th&gt;Title&lt;/th&gt;\n                &lt;th&gt;Description&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;?php foreach ($opt[\"books\"] as $book) { ?&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;?= $book[\"author\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $book[\"title\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $book[\"description\"] ?&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;?php }]; ?&gt;\n</code></pre>"},{"location":"guides/library/#setting-up-our-application","title":"Setting up our Application","text":"<p>To start working with permissions, we first need the basic structure of our application. This guide provides pre-built files in the \"Resources\" section, including templates for controllers, models, and views. Using these resources ensures an organized setup and allows us to focus on implementing functionality and permissions efficiently.</p>"},{"location":"guides/library/#how-does-permissions-works","title":"How does Permissions works?","text":"<p>The framework includes a robust and fully implemented permission system designed to manage access control efficiently. This system is built around roles and the associated permissions assigned to those roles.</p>"},{"location":"guides/library/#key-features","title":"Key Features:","text":"<p>A user can have multiple roles, and each role can be assigned multiple permissions. This flexible structure allows for precise and scalable access control throughout the application.</p>"},{"location":"guides/library/#database-structure","title":"Database Structure:","text":"<p>The permission data is stored in the database across several tables:</p> <ul> <li>z_user: Contains information about registered users of the application.</li> <li>z_role: Lists all roles available in the system.</li> <li>z_role_permissions: Defines which permissions are assigned to each role.</li> <li>z_user_role: Tracks which roles are assigned to each user.</li> </ul>"},{"location":"guides/library/#permission-format","title":"Permission Format:","text":"<p>Permissions are structured using a dot-separated hierarchy, for example: <code>library.view</code> </p> <p>This format makes it easy to organize permissions by area or functionality, ensuring clarity and scalability when defining access levels within the application.</p>"},{"location":"guides/library/#how-to-use-permissions-in-a-controller","title":"How to use Permissions in a Controller","text":"<p>In our Library application, we want to restrict access to the book list so that only authorized users can view it.  </p> <p>To enforce this restriction, we need to add the following code to our controller action: <pre><code>&lt;?php\n    class LibraryController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"library.list\");\n\n            $books = $req-&gt;getModel(\"Library\")-&gt;getBooks();\n\n            return $res-&gt;render(\"library/list\", [\n                \"books\" =&gt; $books\n            ]);\n        }\n    }\n?&gt;\n</code></pre></p>"},{"location":"guides/library/#explanation","title":"Explanation","text":"<p>The line <code>$req-&gt;checkPermission(\"library.list\")</code> verifies if the currently logged-in user has the <code>library.list</code> permission.  </p> <ul> <li>If the user has the permission: The request continues, and the book list is display.  </li> <li>If the user lacks the permission: The framework automatically redirects them to a <code>403 Forbidden</code> page, ensuring they cannot access restricted areas of the application.</li> </ul>"},{"location":"guides/library/#how-to-use-permissions-in-a-view","title":"How to use Permissions in a View","text":"<p>Checking permissions directly in a view can be very useful for controlling the visibility of specific elements based on the user's access level.  </p> <p>In this example, we will check if the user has the <code>library.delete</code> permission. If they do, they will see a button to delete a book. Otherwise, a message saying \"No permissions\" will be displayed.</p> <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Author&lt;/th&gt;\n                &lt;th&gt;Title&lt;/th&gt;\n                &lt;th&gt;Description&lt;/th&gt;\n                &lt;td&gt;Manage&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;?php foreach ($opt[\"books\"] as $book) { ?&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;?= $book[\"author\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $book[\"title\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $book[\"description\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"library.delete\")) { ?&gt;\n                            &lt;button&gt;Delete&lt;/button&gt;\n                        &lt;?php } else { ?&gt;\n                            &lt;i&gt;No Permissions&lt;/i&gt;\n                        &lt;?php } ?&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;?php }]; ?&gt;\n</code></pre>"},{"location":"guides/library/#explanation_1","title":"Explanation","text":"<ul> <li>Opening PHP: We start by opening PHP to write server-side logic. Here, we access the <code>$opt</code> object, which contains the current user (<code>$opt[\"user\"]</code>) and the books to be displayed.</li> <li>Getting the User Object: The <code>$opt[\"user\"]</code> object represents the currently logged-in user. Using its <code>checkPermission()</code> method, we verify if the user has the required permission (<code>library.edit</code>).</li> <li>Checking Permissions: The checkPermission(<code>\"library.delete\"</code>) method returns <code>true</code> if the user has the required permission, and <code>false</code> otherwise.</li> <li>Closing PHP for HTML Rendering: Inside the <code>if</code> condition, we close PHP to render the HTML (e.g., a button for editing the book). If the user lacks the permission, the <code>else</code> block displays a message (<code>No Permissions</code>).</li> </ul>"},{"location":"guides/library/#how-to-create-roles-and-permissions","title":"How to create Roles and Permissions","text":"<p>Now that we understand how to use permissions, it\u2019s essential to know how to create them. Here\u2019s a step-by-step guide using the admin panel provided by the framework:</p> <p>1) Access the Admin Panel Open your browser and navigate to the admin panel at <code>http://localhost:8080/z</code>.</p> <p>2) Login In as Admin Use the default administrator credentials:</p> <ul> <li>Email: <code>admin@zierhut-it.de</code></li> <li>Password: <code>password</code></li> </ul> <p>3) Create a New Role </p> <ul> <li>Once logged in, click on the <code>Roles</code> section in the admin panel.</li> <li>Click the <code>Create Role</code> button</li> <li>Enter a name for the role, e.g., <code>Library</code>.</li> <li>In the permissions section, add the following permissions:<ul> <li><code>library.list</code></li> <li><code>library.delete</code></li> </ul> </li> <li>Click Submit to save the role and its permissions.</li> </ul> <p>4) Assign Role to a User</p> <ul> <li>In the navigation panel, select Edit Users</li> <li>Choose the user you want to assign the role to.</li> <li>Under the Roles, select your created role and click Submit to save the changes.</li> </ul> <p>Now the suer assigned with your role will have access to the <code>library.delete</code> and <code>library.edit</code> permissions, ensuring they can access and manage the respective parts of the application securely.</p>"},{"location":"guides/library/#summary","title":"Summary","text":"<ul> <li>Roles: Create roles like <code>Library</code> to group relevant permissions.</li> <li>Permissions: Assign permissions such as <code>library.list</code> to control access to specific features</li> <li>Access Control: Enforce permission checks in controllers and views to ensure only authorized users can access specific features.</li> </ul> <p>This guide highlights how to implement a secure, permission-based access control system for your application.</p>"},{"location":"guides/library/#next-guide","title":"Next Guide","text":"<p>As you can see, we\u2019ve implemented a button that is visible only to users with the <code>library.delete</code> permission. However, the button currently has no functionality. In the next guide, we\u2019ll explore how to create backend requests to handle actions triggered from the view, enabling dynamic and secure interactions between the front-end and the back-end.</p> <p>Shop</p>"},{"location":"guides/shop/","title":"Shop Application","text":"<p>In the last guide, we explored how to enhance your website's security by implementing roles and permissions to restrict user access effectively.</p> <p>In this guide, we\u2019ll focus on handling backend requests in your application. Using a Shop example, we will demonstrate how to implement functionality for removing data from the database, triggered by a delete button on the page. This will provide you with the foundation for managing interactive actions securely and efficiently.</p>"},{"location":"guides/shop/#resources","title":"Resources","text":"Database <pre><code>CREATE TABLE `product` (\n    `id` INT AUTO_INCREMENT PRIMARY KEY,\n    `name` VARCHAR(255) NOT NULL,\n    `price` FLOAT NOT NULL,\n    `active` TINYINT NOT NULL DEFAULT 1,\n    `created` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <pre><code>INSERT INTO `product`(`name`, `price`) VALUES\n('Laptop', 999.99),\n('Smartphone', 599.49),\n('Tablet', 329.89),\n('Smartwatch', 199.99),\n('Bluetooth Speaker', 89.99),\n('Wireless Headphones', 149.99),\n('Gaming Mouse', 49.99),\n('Mechanical Keyboard', 119.99),\n('External Hard Drive', 79.99),\n('Webcam', 59.99);\n</code></pre> Controller     ShopController     <pre><code>&lt;?php\n    class ShopController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"shop.view\");\n\n            if ($req-&gt;isAction(\"delete-product\")) {\n                $req-&gt;checkPermission(\"shop.delete\");\n                $productId = $req-&gt;getPost(\"productId\");\n\n                $req-&gt;getModel(\"Shop\")-&gt;deleteProduct($productId);\n                return $res-&gt;success();\n            }\n\n            $products = $req-&gt;getModel(\"Shop\")-&gt;getProducts();\n\n            return $res-&gt;render(\"shop/shopping_cart\", [\n                \"products\" =&gt; $products\n            ]);\n        }\n    }\n?&gt;\n</code></pre> Model     ShopModel     <pre><code>&lt;?php\n    class ShopModel extends z_model {\n\n        public function getProducts() {\n            $sql = \"SELECT *\n                    FROM `product`\n                    WHERE `active` = 1\";\n            return $this-&gt;exec($sql)-&gt;resultToArray();\n        }\n\n        public function deleteProduct($productId) {\n            $sql = \"UPDATE `product`\n                    SET `active` = 0\n                    WHERE `id` = ?\";\n            $this-&gt;exec($sql, \"i\", $productId);\n        }\n    }\n?&gt;\n</code></pre> View     shopping_cart     <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Price&lt;/th&gt;\n                &lt;th&gt;Delete&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;?php foreach ($opt[\"products\"] as $product) { ?&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;?= $product[\"name\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $product[\"price\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"library.edit\")) { ?&gt;\n                            &lt;button&gt;\"&gt;Delete&lt;/button&gt;\n                        &lt;?php } else { ?&gt;\n                            &lt;i&gt;No Permissions&lt;/i&gt;\n                        &lt;?php } ?&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;?php }]; ?&gt;\n</code></pre>"},{"location":"guides/shop/#setting-up-our-application","title":"Setting up our Application","text":"<p>To start working with permissions, we first need the basic structure of our application. This guide provides pre-built files in the \"Resources\" section, including templates for controllers, models, and views. Using these resources ensures an organized setup and allows us to focus on implementing functionality and backend requests efficiently.</p>"},{"location":"guides/shop/#how-do-backend-requests-work","title":"How Do Backend Requests work?","text":"<p>The framework includes a robust and fully implemented request system. Backend requests enable communication between the view and the controller. When an action is triggered in the view, such as clicking a delete button, a request is sent to the controller. The controller processes this request, performs the necessary operations\u2014such as deleting an item from the database\u2014and sends a response back to the view. This ensures that user actions on the front end dynamically and securely interact with the back-end logic and data.</p>"},{"location":"guides/shop/#how-to-send-a-backend-request","title":"How to send a Backend Request?","text":"<p>To send a backend request, we need to update our view to handle user actions. Here, we\u2019ll make the delete button functional by adding an event listener to manage button clicks.</p> <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Price&lt;/th&gt;\n                &lt;th&gt;Delete&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;?php foreach ($opt[\"products\"] as $product) { ?&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;?= $product[\"name\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $product[\"price\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"library.edit\")) { ?&gt;\n                            &lt;button class=\"delete-product\"&gt;Delete&lt;/button&gt;\n                        &lt;?php } else { ?&gt;\n                            &lt;i&gt;No Permissions&lt;/i&gt;\n                        &lt;?php } ?&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;?php }]; ?&gt;\n</code></pre> <p>To send a backend request, we need to update our view to handle user actions. Here, we\u2019ll make the delete button functional by adding an event listener to manage button clicks.</p> What are classes? <p>Classes are identifiers used in HTML elements to apply styles with CSS or add behavior with JavaScript. They can be shared across multiple elements for consistency.</p> <p>Additionally, there are IDs, which are unique identifiers meant to target a single element on a page.</p> <p>First, assign a class to the delete button so it can be uniquely identified: <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Price&lt;/th&gt;\n                &lt;th&gt;Delete&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;?php foreach ($opt[\"products\"] as $product) { ?&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;?= $product[\"name\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $product[\"price\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"library.edit\")) { ?&gt;\n                            &lt;button class=\"delete-product\"&gt;Delete&lt;/button&gt;\n                        &lt;?php } else { ?&gt;\n                            &lt;i&gt;No Permissions&lt;/i&gt;\n                        &lt;?php } ?&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;?php }]; ?&gt;\n</code></pre> The <code>class=\"delete-product\"</code> ensures that only these buttons are targeted for the delete functionality.</p> What is jQuery? <p>jQuery is a fast, small, and feature-rich JavaScript library designed to simplify HTML document traversal, event handling, animations, and AJAX interactions. It provides an easy-to-use API that works across a multitude of browsers, making it a popular choice for enhancing web development with minimal code.</p> <p>More information can be found on the official jQuery website.</p> <p>Next, use <code>jQuery</code> to add an event listener for the buttons with the <code>delete-product</code> class. To enhance security, we ensure the script is only displayed to users who have the appropriate permissions. This prevents unauthorized users from accessing or triggering backend functionality.</p> <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Price&lt;/th&gt;\n                &lt;th&gt;Delete&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;?php foreach ($opt[\"products\"] as $product) { ?&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;?= $product[\"name\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $product[\"price\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"library.edit\")) { ?&gt;\n                            &lt;button class=\"delete-product\"&gt;\"&gt;Delete&lt;/button&gt;\n                        &lt;?php } else { ?&gt;\n                            &lt;i&gt;No Permissions&lt;/i&gt;\n                        &lt;?php } ?&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"library.edit\")) { ?&gt;\n        &lt;script&gt;\n            $(\".delete-product\").click(function() {\n\n            });\n        &lt;/script&gt;\n    &lt;?php } ?&gt;\n&lt;?php }]; ?&gt;\n</code></pre> What do EventListeners do? <p>EventListeners are JavaScript functions that wait for a specific event, such as a click or a keypress, to occur on an element. When the event happens, the listener executes a predefined action or function, enabling dynamic interactions on a webpage.</p> <p>This script attaches a <code>click()</code> event listener to all elements with the delete-product class, setting up the functionality needed to handle the delete action dynamically.</p> <p>Now we need to get our product-identifier ('id'). For that we need to save the id`s of the products inside the product-html-element. We are doing it like that: <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Price&lt;/th&gt;\n                &lt;th&gt;Delete&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;?php foreach ($opt[\"products\"] as $product) { ?&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;?= $product[\"name\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $product[\"price\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"library.edit\")) { ?&gt;\n                            &lt;button class=\"delete-product\" data-id=\"&lt;?= $opt['id'] ?&gt;\"&gt;\"&gt;Delete&lt;/button&gt;\n                        &lt;?php } else { ?&gt;\n                            &lt;i&gt;No Permissions&lt;/i&gt;\n                        &lt;?php } ?&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"library.edit\")) { ?&gt;\n        &lt;script&gt;\n            $(\".delete-product\").click(function() {\n                var id = $(this).data(\"id\");\n            });\n        &lt;/script&gt;\n    &lt;?php } ?&gt;\n&lt;?php }]; ?&gt;\n</code></pre></p> <p>With the <code>data-id</code> attribute, we can embed custom values into our HTML elements. For example, using <code>var id = $(this).data(\"id\");</code>, we can retrieve the <code>id</code> of the selected product and store it in a variable.</p> <p>Next, we send the product ID to the backend using the <code>Z.Request.action</code> method: <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Price&lt;/th&gt;\n                &lt;th&gt;Delete&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;?php foreach ($opt[\"products\"] as $product) { ?&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;?= $product[\"name\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;?= $product[\"price\"] ?&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"library.edit\")) { ?&gt;\n                            &lt;button class=\"delete-product\" data-id=\"&lt;?= $opt['id'] ?&gt;\"&gt;\"&gt;Delete&lt;/button&gt;\n                        &lt;?php } else { ?&gt;\n                            &lt;i&gt;No Permissions&lt;/i&gt;\n                        &lt;?php } ?&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"library.edit\")) { ?&gt;\n        &lt;script&gt;\n            $(\".delete-product\").click(function() {\n                var id = $(this).data(\"id\");\n\n                Z.Request.action('delete-product', {\n                    productId: id\n                }, (res) =&gt; {\n                    if(res.result == 'success') {\n                        location.reload();\n                        return;\n                    }\n                    alert(\"An error occurred\");\n                });\n            });\n        &lt;/script&gt;\n    &lt;?php } ?&gt;\n&lt;?php }]; ?&gt;\n</code></pre> The <code>Z.Request.action</code> method sends the request to the backend, with <code>delete-product</code> as the identifier to specify the action to perform. The product <code>ID</code> is passed as data to identify the item to delete. The response is then handled by checking if the result is <code>success</code>. If so, the page reloads to update the table; otherwise, an error message is displayed.</p>"},{"location":"guides/shop/#how-to-handle-a-request-in-the-backend","title":"How to handle a Request in the Backend?","text":"<p>Backend Requests sended with the <code>Z.Request.action</code> method, will always land on the Action, we are currently in with the view. To handle now the request we need to check if the action in our controller is set to our identifier of our request (<code>delete-product</code>). We are doing it like this: <pre><code>&lt;?php\n    class ShopController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"shop.view\");\n\n            if ($req-&gt;isAction(\"delete-product\")) {\n\n            }\n\n            $products = $req-&gt;getModel(\"Shop\")-&gt;getProducts();\n\n            return $res-&gt;render(\"shop/shopping_cart\", [\n                \"products\" =&gt; $products\n            ]);\n        }\n    }\n?&gt;\n</code></pre> To handle the backend request, we first check if the request matches the <code>delete-product</code> identifier using <code>$req-&gt;isAction(\"delete-product\")</code>. This ensures we are processing the correct action.</p> <p>Next, we secure the request and retrieve the <code>productId</code> sent from the frontend: <pre><code>&lt;?php\n    class ShopController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"shop.view\");\n\n            if ($req-&gt;isAction(\"delete-product\")) {\n                $req-&gt;checkPermission(\"shop.delete\");\n                $productId = $req-&gt;getPost(\"productId\");\n\n            }\n\n            $products = $req-&gt;getModel(\"Shop\")-&gt;getProducts();\n\n            return $res-&gt;render(\"shop/shopping_cart\", [\n                \"products\" =&gt; $products\n            ]);\n        }\n    }\n?&gt;\n</code></pre> Here, <code>$productId = $req-&gt;getPost(\"productId\")</code> retrieves the product ID from the request data. We then delete the product by calling the <code>deleteProduct</code> method in the <code>ShopModel</code> and passing the <code>productId</code> as a parameter:</p> <pre><code>&lt;?php\n    class ShopController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"shop.view\");\n\n            if ($req-&gt;isAction(\"delete-product\")) {\n                $req-&gt;checkPermission(\"shop.delete\");\n                $productId = $req-&gt;getPost(\"productId\");\n\n                $req-&gt;getModel(\"Shop\")-&gt;deleteProduct($productId);\n            }\n\n            $products = $req-&gt;getModel(\"Shop\")-&gt;getProducts();\n\n            return $res-&gt;render(\"shop/shopping_cart\", [\n                \"products\" =&gt; $products\n            ]);\n        }\n    }\n?&gt;\n</code></pre> <p>Finally, we send a response back to the frontend. The framework provides several response methods, such as:  </p> <ul> <li><code>$res-&gt;success()</code>  Indicates the request was successful.</li> <li><code>$res-&gt;error()</code> Indicates the request failed.</li> </ul> <p>In this case, since the request is successful, we use <code>$res-&gt;success()</code> and return immediately to prevent further code execution:</p> <pre><code>&lt;?php\n    class ShopController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"shop.view\");\n\n            if ($req-&gt;isAction(\"delete-product\")) {\n                $req-&gt;checkPermission(\"shop.delete\");\n                $productId = $req-&gt;getPost(\"productId\");\n\n                $req-&gt;getModel(\"Shop\")-&gt;deleteProduct($productId);\n                return $res-&gt;success();\n            }\n\n            $products = $req-&gt;getModel(\"Shop\")-&gt;getProducts();\n\n            return $res-&gt;render(\"shop/shopping_cart\", [\n                \"products\" =&gt; $products\n            ]);\n        }\n    }\n?&gt;\n</code></pre> <p>This ensures a clear response is sent to the frontend, confirming whether the deletion was successful, and prevents unnecessary processing after the response. For additional response options, refer to the REST API documentation.</p>"},{"location":"guides/shop/#why-set-active-0-instead-of-deleting-the-product-from-the-database","title":"Why Set <code>active = 0</code> Instead of Deleting the Product from the Database?","text":"<p>The <code>deleteProduct</code> function in our <code>ShopModel</code> is implemented as follows: <pre><code>public function deleteProduct($productId) {\n    $sql = \"UPDATE `product`\n            SET `active` = 0\n            WHERE `id` = ?\";\n    $this-&gt;exec($sql, \"i\", $productId);\n}\n</code></pre> Instead of removing the product entirely, this function simply sets the <code>active</code> status to <code>0</code> in the database. This approach is more prudent because it allows us to retain the data even after a product is \"deleted.\"  </p> <p>This makes it possible to restore mistakenly deleted products and adds a layer of security for user interactions, for example, in cases where users may post inappropriate content and then try to delete it immediately.  </p> <p>However, in our <code>getProducts</code> function, we make sure to only retrieve items that have an <code>active</code> status of <code>1</code>, so that \"deleted\" products are not visible in the regular product listings.</p>"},{"location":"guides/shop/#summary","title":"Summary","text":"<ul> <li>Z.Request.action: Sends a request to the backend, requiring an identifier. Additional data can be provided optionally.</li> <li>$req-&gt;isAction(\"\"): Checks whether there is a backend request that needs to be handled.</li> <li>active=0: It is preferable to set the active status of database entries to 0 rather than deleting them permanently.</li> </ul> <p>This guide demonstrates how to implement backend requests for our website, enabling efficient data management directly from the frontend.</p>"},{"location":"guides/shop/#next-guide","title":"Next Guide","text":"<p>In the next guide, we will learn how to add a form to our website. This will allow us to easily and securely insert data into a database.</p>"},{"location":"guides/todo/","title":"Todo Application","text":"<p>In the last guide, we explored how to make backend requests and manage them effectively on the server side.</p> <p>In this guide, we will learn how to create forms within our website. Using a simple Todo application as an example, we will demonstrate how to implement functionality to add data to our database using forms.</p>"},{"location":"guides/todo/#resources","title":"Resources","text":"Database <pre><code>CREATE TABLE `todo` (\n    `id` INT AUTO_INCREMENT PRIMARY KEY,\n    `description` VARCHAR(255) NOT NULL,\n    `completed` TINYINT NOT NULL DEFAULT 0,\n    `active` TINYINT NOT NULL DEFAULT 1,\n    `created` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <pre><code>INSERT INTO `todo` (`description`) VALUES\n('Buy groceries'),\n('Clean the kitchen'),\n('Finish reading the book'),\n('Take the dog for a walk'),\n('Pay utility bills'),\n('Call mom'),\n('Schedule a dentist appointment'),\n('Organize workspace'),\n('Update software on laptop'),\n('Prepare presentation slides');\n</code></pre> Controller     TodoController     <pre><code>&lt;?php\n    class TodoController extends z_controller {\n\n        public function action_list(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"todo.view\");\n\n            if ($req-&gt;isAction(\"delete-todo\")) {\n                $req-&gt;checkPermission(\"todo.delete\");\n\n                $todoId = $req-&gt;getPost(\"todoId\");\n\n                $req-&gt;getModel(\"Todo\")-&gt;deleteTodo($todoId);\n                return $res-&gt;success();\n            }\n\n            if ($req-&gt;isAction(\"complete-todo\")) {\n                $todoId = $req-&gt;getPost(\"todoId\");\n\n                $req-&gt;getModel(\"Todo\")-&gt;completeTodo($todoId);\n                return $res-&gt;success();\n            }\n\n            $todos = $req-&gt;getModel(\"Todo\")-&gt;getTodoList();\n\n            return $res-&gt;render(\"todo/list\", [\n                \"todos\" =&gt; $todos\n            ]);\n        }\n\n        public function action_add(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"todo.add\");\n\n            // Handle here the Form\n\n            return $res-&gt;render(\"todo/add\");\n        }\n    }\n?&gt;\n</code></pre> Model     TodoModel     <pre><code>&lt;?php\n    class TodoModel extends z_model {\n\n        public function getTodoList() {\n            $sql = \"SELECT *\n                    FROM `todo`\n                    WHERE `active` = 1\";\n            return $this-&gt;exec($sql)-&gt;resultToArray();\n        }\n\n        public function deleteTodo($todoId) {\n            $sql = \"UPDATE `todo`\n                    SET `active` = 0\n                    WHERE `id` = ?\";\n            $this-&gt;exec($sql, \"i\", $todoId);\n        }\n\n        public function completeTodo($todoId) {\n            $sql = \"UPDATE `todo`\n                    SET `completed` = 1\n                    WHERE `id` = ?\";\n            $this-&gt;exec($sql, \"i\", $todoId);\n        }\n    }\n?&gt;\n</code></pre> View     list     <pre><code>    &lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Description&lt;/th&gt;\n                    &lt;th&gt;Completed&lt;/th&gt;\n                    &lt;th&gt;Delete&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;?php foreach ($opt[\"todos\"] as $todo) { ?&gt;\n                    &lt;tr&gt;\n                        &lt;td&gt;&lt;?= $todo[\"description\"] ?&gt;&lt;/td&gt;\n                        &lt;td&gt;&lt;?= $todo[\"completed\"] ?&gt;&lt;/td&gt;\n                        &lt;td&gt;\n                            &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"todo.delete\")) { ?&gt;\n                                &lt;button class=\"delete-todo\" data-id=\"&lt;?= $todo[\"id\"] ?&gt;\"&gt;Delete&lt;/button&gt;\n                            &lt;?php } else { ?&gt;\n                                &lt;i&gt;No Permissions&lt;/i&gt;\n                            &lt;?php } ?&gt;\n\n                            &lt;button class=\"complete-todo\" data-id=\"&lt;?= $todo[\"id\"] ?&gt;\"&gt;Complete&lt;/button&gt;\n                        &lt;/td&gt;\n                    &lt;/tr&gt;\n                &lt;?php } ?&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n\n\n        &lt;?php if($opt[\"user\"]-&gt;checkPermission(\"todo.delete\")) { ?&gt;\n            &lt;script&gt;\n                $(\".delete-todo\").click(function() {\n                    var id = $(this).data(\"id\");\n\n                    Z.Request.action('delete-todo', {\n                        todoId: id\n                    }, (res) =&gt; {\n                        if(res.result == 'success') {\n                            location.reload();\n                            return;\n                        }\n                        alert(\"An error occurred\");\n                    });\n                });\n\n                $(\".complete-todo\").click(function() {\n                    var id = $(this).data(\"id\");\n\n                    Z.Request.action('complete-todo', {\n                        todoId: id\n                    }, (res) =&gt; {\n                        if(res.result == 'success') {\n                            location.reload();\n                            return;\n                        }\n                        alert(\"An error occurred\");\n                    });\n                });\n            &lt;/script&gt;\n        &lt;?php } ?&gt;\n    &lt;?php }]; ?&gt;\n</code></pre>"},{"location":"guides/todo/#setting-up-our-application","title":"Setting up our Application","text":"<p>To begin working with forms, we first need to establish a basic structure for our application. You can start by copying the controllers, models, views, and database files into the section of your project. Using these resources ensures an organized setup, allowing us to focus on implementing functionality and forms effectively.</p>"},{"location":"guides/todo/#how-to-create-a-form","title":"How to create a Form?","text":"What are Forms? <p>A form is an interactive element within a web page that allows users to input and submit data. Using the ZubZet framework, forms can be dynamically created and validated, ensuring efficient data collection and seamless integration with backend processing and database storage.</p> <p>With the help of the framework, creating a form is straightforward. This form comes with several advantages, including easy management, a wide range of features, and an appealing design.</p>"},{"location":"guides/todo/#creating-a-form-in-a-view","title":"Creating a Form in a View","text":"<p>To create a form in a view using ZubZet's framework, start by defining an HTML <code>div</code> element with an <code>id</code> attribute to serve as the container for the form: <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;div id=\"form\"&gt;&lt;/div&gt;\n&lt;?php }]; ?&gt;\n</code></pre></p> <p>Next, include a JavaScript block within the view. This script block will be used to configure and define the form: <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;div id=\"form\"&gt;&lt;/div&gt;\n    &lt;script&gt;\n    &lt;/script&gt;\n&lt;?php }]; ?&gt;\n</code></pre></p> <p>To initialize the form, use the <code>Z.Forms.create</code> method from the framework's JavaScript API. The <code>dom</code> property specifies the container's ID: <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;div id=\"form\"&gt;&lt;/div&gt;\n    &lt;script&gt;\n        var form = Z.Forms.create({\n            dom: \"form\",\n        });\n    &lt;/script&gt;\n&lt;?php }]; ?&gt;\n</code></pre></p> <p>Fields can now be added to the form. For example, to include a text input field for a task description, use the createField method. Define attributes such as <code>name</code>, <code>type</code>, <code>text</code>, and <code>required</code> to specify the field's behavior: <pre><code>&lt;?php return [\"body\" =&gt; function ($opt) { ?&gt;\n    &lt;div id=\"form\"&gt;&lt;/div&gt;\n    &lt;script&gt;\n        var form = Z.Forms.create({\n            dom: \"form\",\n        });\n\n        form.createField({\n            name: \"description\",\n            type: \"text\",\n            text: \"Todo\",\n            required: true,\n        });\n    &lt;/script&gt;\n&lt;?php }]; ?&gt;\n</code></pre></p> What does the attributes mean? <p>Each field's attributes serve specific purposes:</p> <ul> <li><code>name</code>: Identifies the field for backend processing.</li> <li><code>type</code>: Determines the input type (e.g., text, number, password, or date).</li> <li><code>text</code>: Displays a label for the field above the input.</li> <li><code>required</code>: Specifies whether the field must be filled before submission.</li> </ul> <p>There are additional attributes available to customize your fields. You can find the full list here</p>"},{"location":"guides/todo/#handle-form-in-the-backend","title":"Handle Form in the backend","text":"<p>To handle submitted form data, go to your controller which send you the view of the form. Begin by checking for the presence of form data with <code>$req-&gt;hasFormData()</code>. This function ensures the backend processes only valid form submissions: <pre><code>&lt;?php\n    class TodoController extends z_controller {\n\n        // function action_list\n\n        public function action_add(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"todo.add\");\n\n            if($req-&gt;hasFormData()) {\n\n            }\n\n            return $res-&gt;render(\"todo/add\");\n        }\n    }\n?&gt;\n</code></pre></p> <p><code>$req-&gt;hasFormData()</code> is similar to <code>req-&gt;isAction()</code>. Both methods are used to check if the frontend is requesting the backend to process a specific action.</p> <p>Once it is determined that a form needs to be handled, the next step is to validate the form. In this example, we ensure that the <code>description</code> field is mandatory and that the user input is between 5 and 15 characters long.</p> <pre><code>&lt;?php\n    class TodoController extends z_controller {\n\n        // function action_list\n\n        public function action_add(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"todo.add\");\n\n            if($req-&gt;hasFormData()) {\n                $formResult = $req-&gt;validateForm([\n                    (new FormField(\"description\"))\n                        -&gt;required()-&gt;length(5, 15),\n                ]);\n            }\n\n            return $res-&gt;render(\"todo/add\");\n        }\n    }\n?&gt;\n</code></pre> <p>If validation fails, return errors to the frontend using <code>$res-&gt;formErrors()</code>: <pre><code>&lt;?php\n    class TodoController extends z_controller {\n\n        // function action_list\n\n        public function action_add(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"todo.add\");\n\n            if($req-&gt;hasFormData()) {\n                $formResult = $req-&gt;validateForm([\n                    (new FormField(\"description\"))\n                        -&gt;required()-&gt;length(5, 15),\n                ]);\n\n                if($formResult-&gt;hasErrors) {\n                    return $res-&gt;formErrors($formResult-&gt;errors);\n                }\n            }\n\n            return $res-&gt;render(\"todo/add\");\n        }\n    }\n?&gt;\n</code></pre></p> <p><code>$formResult-&gt;hasErrors()</code> checks if there is any invalid input. If errors are present, the method return <code>$res-&gt;formErrors($formResult-&gt;errors);</code> sends the errors to the frontend, allowing them to be displayed to the user for correction.</p> <p>Upon successful validation, use $res-&gt;insertDatabase to save the data to a database. Ensure field names in the frontend match database column names: <pre><code>&lt;?php\n    class TodoController extends z_controller {\n\n        // function action_list\n\n        public function action_add(Request $req, Response $res) {\n            $req-&gt;checkPermission(\"todo.add\");\n\n            if($req-&gt;hasFormData()) {\n                $formResult = $req-&gt;validateForm([\n                    (new FormField(\"description\"))\n                        -&gt;required()-&gt;length(5, 15),\n                ]);\n\n                if($formResult-&gt;hasErrors) {\n                    return $res-&gt;formErrors($formResult-&gt;errors);\n                }\n\n                $res-&gt;insertDatabase(\"todo\", $formResult);\n                return $res-&gt;success();\n            }\n\n            return $res-&gt;render(\"todo/add\");\n        }\n    }\n?&gt;\n</code></pre> By following these steps, the form can be created, validated, and handled efficiently, ensuring both the frontend and backend work seamlessly together.</p>"},{"location":"guides/todo/#summary","title":"Summary","text":"<ul> <li>Z.Forms.create: Initializes a form within a view. It requires a <code>dom</code> attribute to specify the container where the form will be rendered.</li> <li>createField: Creates individual fields with various attributes to customize their behavior and appearance.</li> <li>hasFormData(): Similar to <code>req-&gt;isAction()</code>, it checks if the frontend is requesting the backend to handle form data.</li> <li>validateForm: Validates form fields based on predefined rules to ensure data meets the intended criteria.</li> <li>formErrors: Sends validation errors back to the frontend if any fields contain invalid input, allowing for user correction.</li> <li>insertDatabase: Inserts validated form data directly into the database.</li> </ul>"},{"location":"guides/todo/#next-guide","title":"Next Guide","text":"<p>In the upcoming guide, we will explore how to create and use layouts to organize your website into distinct sections for better structure and maintainability.</p> <p>Layouts</p>"},{"location":"setup/how-to-contribute/","title":"How to Contribute","text":"<ol> <li> <p>Clone the Repository <pre><code>git clone https://github.com/zubzet/framework.git\n</code></pre></p> </li> <li> <p>Start a Live Preview: Use the following Docker command to start a live preview of the documentation on port 8000: <pre><code>docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material\n</code></pre></p> </li> <li> <p>Make Changes: Edit or add files under the /docs directory. Any changes will be automatically reflected in the live preview.</p> </li> <li> <p>Submit a Pull Request: Once you\u2019ve made your changes, push them to your fork and create a pull request to contribute your improvements.</p> </li> </ol> <p> Thank you for helping improve the ZubZet framework!</p>"},{"location":"setup/how-to-update/","title":"Updating to the newest version of the framework","text":"<p>This page assumes you are using this framework as a git submodule .</p> <ol> <li>Get the newest version of the submodule by using <code>git pull</code> in the <code>z_framework</code> directory.</li> <li>Open the Z-Admin panel by opening the web page in your browser <code>yourwebsite.tld/[root/]z/</code> and log in.</li> <li>Go to the <code>Framework Update</code> page.</li> <li>Click <code>Update to framework version</code>.</li> </ol> <p>When you reload the page and the project version is the same as the framework version, everything worked fine.</p>"},{"location":"setup/installation/","title":"Installation","text":"<ol> <li>Create a new folder for your project.</li> <li>Initialize an empty Git repository using <code>git init</code></li> <li>Add the framework as a submodule using <code>git submodule add https://git.zierhut-it.de/ZubZet/framework.git z_framework</code></li> <li>Login with your account if needed.</li> <li>You are required to have your php environment variable set. Use <code>php -v</code> to check. Fix this problem first, if you get an error.</li> <li>Navigate to your project in your browser. (Don't forget to use a webserver)</li> <li>Open the folder <code>z_framework</code></li> <li>Run <code>installer.php</code></li> <li>Make sure your mysql capable service of choice is running.</li> <li>Fill out all the inputs and click Install.</li> </ol>"},{"location":"setup/upgrade/0.10-to-0.11/","title":"0.10 to 0.11","text":""},{"location":"setup/upgrade/0.10-to-0.11/#installation","title":"Installation","text":""},{"location":"setup/upgrade/0.10-to-0.11/#repository-url","title":"Repository URL","text":"<p>The repository URL has changed. ZubZet now made it to Github! To update your submodule, run the following command in the z_framework folder.</p> SSH <p>Update to the new repo URL using SSH: <pre><code>git submodule set-url z_framework ssh://git@github.com:zubzet/framework.git\n</code></pre></p> HTTPS <p>Update to the new repo URL using HTTPS: <pre><code>git submodule set-url z_framework https://github.com/zubzet/framework.git\n</code></pre></p> <p>Be sure to checkout to 0.11.0 afterwards! <pre><code>cd z_framework\ngit checkout 0.11.0\n</code></pre></p>"},{"location":"setup/upgrade/0.10-to-0.11/#mail-security","title":"Mail Security","text":"<p>There is a new config setting called <code>mail_security</code>, which allows setting the transport security when sending mails. Until now, it has always been <code>tls</code>, which is why <code>tls</code> is the default value for this setting. No update to the configuration file i needed. If you i.e. use a local mailer, which requires a plain connection, you may set this setting to <code>false</code>. The following steps are recommended to migrate local test setup, which use environment variables to overwrite settings:</p> <ol> <li>Set the value <code>mail_security</code> in the configuration file to <code>tls</code>.</li> <li>Set the environment variable <code>CONFIG_MAIL_SECURITY</code> to <code>\"false\"</code>. (Include the <code>\"</code>)</li> </ol> <p>This way a production deployment does not need to overwrite this value, while allowing for local plain connections.</p>"},{"location":"setup/upgrade/0.9-to-0.10/","title":"0.9 to 0.10","text":""},{"location":"setup/upgrade/0.9-to-0.10/#installation","title":"Installation","text":"<p>The update system has been changed. Before upgrading to 0.11.x, please run the legacy updater one last time using the Admin Dashboard or by running the command <code>php z_framework/updater.php</code> in the root directory of your project.</p> <p>Make sure that you have pulled the latest version of 0.10.x before running the legacy updater.</p>"},{"location":"template-rendering-usages/generating-pdfs/","title":"Generating PDF's","text":"<p>PDF's are generated with a library called html2pdf which is based on TCPDF. A pdf can be shown to a user as a response to a request. The method for that is called <code>$res-&gt;renderPDF()</code>.</p> <p>The document the path to a view. The view is not built up like a normal view. It is a file containing a layout method thats output is given into the <code>$html2pdf-&gt;writeHTML($html)</code> method. The layout method accepts one parameter which is $opt in render.</p> <p>Example PDF response: <pre><code>$res-&gt;renderPDF(\"example.php\", [\"name\" =&gt; \"Thorsten\"], \"out.pdf\", \"I\", ['P', 'A4', 'en', true, 'UTF-8', array(20, 20, 20, 5)]);\n</code></pre></p> <p>Example PDF document: <pre><code>&lt;?php \n    function layout($opt) {\n        &lt;h1&gt;Hello,&lt;/h1&gt;\n        &lt;p&gt;I am a PDF document for &lt;?php echo $opt[\"name\"]; ?&gt;&lt;/p&gt;\n    }\n?&gt;\n</code></pre></p> <p>For more information of what is possible, see here: https://github.com/spipu/html2pdf/blob/master/doc/README.md</p>"},{"location":"template-rendering-usages/sending-an-email/","title":"Sending an email","text":"<p>To send an email there are two methods in response called <code>sendEmail()</code> and <code>sendEmailToUser()</code>.</p> <p><code>$subject</code> can be an array to serve subjects for multiple languages. <code>$document</code> is the path to a view. Any view can be used as a mail. But it is wise to create extra ones, because script stuff won't work. Be careful not to leak data that only the requested account has access to. <code>$opt</code> are parameters to pass into the view. </p> <p>This method uses <code>render()</code> internally.</p> <p>For this feature to work a mail address needs to be configured in the booter settings and a SMTP service needs to be available. PHP need to be setup correctly too.</p> <p>Example code for sending a mail: <pre><code>public function action_register(Request $req, Response $res) {\n    if($req-&gt;isAction(\"register\")) {\n        $email = $req-&gt;getPost(\"email\");\n        $password = $req-&gt;getPost(\"password\");\n\n        $response = $req-&gt;getModel(\"Employee\")-&gt;register($email, $password);\n\n        if(!$response) {\n            return $res-&gt;error();\n        }\n\n        $res-&gt;sendEmail(\n            $email          ,                                         // Target address\n            [\"en\" =&gt; \"Welcome Mail\", \"de\" =&gt; \"Willkommens Mail\"],     // Subject\n            \"email_welcome.php\",                                      // Path to the email view\n            \"en\",                                                     // Language used in the email\n            [\n                \"email\" =&gt; $email\n            ],                                                        // Options\n            \"employee/mail_layout.php\"                                // Layout to use\n        );\n    }\n}\n</code></pre></p>"},{"location":"template-rendering-usages/sending-an-email/#example-layout","title":"Example Layout","text":"<pre><code>&lt;?php return [\"layout\" =&gt; function($opt, $body, $head) { ?&gt;\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;meta charset=\"utf-8\"/&gt;\n            &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\n            &lt;?= $head($opt); ?&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            Welcome &lt;?= $opt[\"email\"] ?&gt;!\n            &lt;?= $body($opt); ?&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n&lt;?php }]; ?&gt;\n</code></pre>"},{"location":"template-rendering-usages/sending-an-email/#send-to-registered-users","title":"Send to registered users","text":"<p><code>sendEmailToUser()</code> sends a mail to an user identified by its user id. The mail address and language are fetched from the database, so less information is needed.</p> <p>Exmaple:  <pre><code>$res-&gt;sendEmailToUser(\n    1,                                                             // User ID\n    [\"en\" =&gt; \"New cooking recipes!\", \"de\" =&gt; \"Neue Kochrezepte!\"], // Subject\n    \"email_recipes.php\",                                           // Path to the mail view\n    [\"r1\" =&gt; \"Cake\", \"r2\" =&gt; \"Cookies!!!\"],                        // Options\n    \"layout/email_layout.php\"                                      // Layout to use\n);\n</code></pre></p>"},{"location":"z-admin/login-as-another-user/","title":"Login: Login as another user","text":"<p>When logging in, the client exchanges it's identifier and password for a authentication token and logs in using this token from that point on. <code>$res-&gt;loginAs</code> allows you to login a current client as another user by their <code>z_user.`id`</code>. </p> <p>The authentication token will track the exec user though. using this data, you'll always know who was logged in as who. You can also set an exec_user yourself, using the second argument of loginAs. If you don't want to build the tracking yourself, just use <code>Log / Statistics</code> within the z_admin panel. You are also able to login as another user using the very same panel.</p> <p>Example: <pre><code>$res-&gt;loginAs(1, 2); //Logs the requesting session in as user 1 and marks the real user as 2.\n</code></pre></p>"},{"location":"z-admin/usage/","title":"What can it do?","text":"<p>The Z-Admin panel is a management panel you can open to edit/create users or roles/permissions.</p>"},{"location":"z-admin/usage/#using-the-z-admin-panel","title":"Using the Z-Admin panel","text":"<p>The Z-Admin panel is a control panel all projects using the framework have. It is accessible with the z controller. For example, an URL like this: <code>localhost/project/z</code> or <code>abcde.de/z</code> or <code>{yourdomain.tld}/{yourwebsite}/z</code>. Only logged in accounts with the correct permissions are able to see this section.</p>"},{"location":"z-admin/usage/#categories","title":"Categories","text":"<p>It has following categories:</p> Category Function Instance Simple place to change instance settings Log / Statistics View logs and statistics Framework Update Start updates for the framework Edit User Form to edit users Add User Form to add users Roles User permission managment"},{"location":"z-admin/usage/#permissions","title":"Permissions","text":"<p>To be able to use all functions, the following permissions are needed:</p> <ul> <li>admin.panel</li> <li>admin.user.list</li> <li>admin.user.add</li> <li>admin.user.edit</li> <li>admin.roles.list</li> <li>admin.roles.create</li> <li>admin.roles.edit</li> <li>admin.roles.delete</li> <li>admin.log</li> <li>admin.su</li> </ul>"},{"location":"z-admin/usage/#assigning-roles","title":"Assigning roles","text":"<p>In order to assign any roles, you must go to Edit Users and select the user you want to give a role to. Hit the \u2018+\u2019 under the title \u2018Roles\u2019 and select the role the user should get. Be advised, each role gives special permissions, some give the user special powers, therefore please see the list above of what roles have which permissions.</p> <p>After you set a role, you can either add more roles or save the user by clicking \u2018submit\u2019 at the bottom of the page. The user should now be able to use their role.</p>"},{"location":"zjs/modals/","title":"Modals","text":"<p>Z.js has the ability to generate one time use modals that can replace the native browser functions <code>alert()</code> and <code>confirm()</code>. The modals are created by Z.js in frontend. Creating modals with this technique on the backend is not possible. If required, the modals should be build as HTML in the view.</p> <p>Z.js Modals don't block the main thread and are better looking than the native alert/confirm.</p> <p>All functions in <code>Z.ModalsBS4</code> require to have the Bootstrap 4 styles loaded.</p>"},{"location":"zjs/modals/#showing-a-simple-text-message","title":"Showing a simple text message","text":"<pre><code>async function() {\n  console.log(\"Modal is opening...\");\n  await Z.ModalsBS4.showMessage({\n    message: \"Hello World\",\n    title: \"Titel\"            // Title is optional\n  });\n  console.log(\"Modal closed!\");\n}\n</code></pre>"},{"location":"zjs/modals/#ask-the-user-for-confirmation","title":"Ask the user for confirmation","text":"<pre><code>async function() {\n  if (await Z.ModalsBS4.confirm({\n    message: \"Please confirm this action\",\n    title: \"Confirmation\",                  // Title is optional\n    confirmString: \"Type this\"              // optional. If given, the user has to type the string into an input before confirming is possible.\n  })) {\n    doSomethingDangerous();\n  }\n}\n</code></pre>"}]}